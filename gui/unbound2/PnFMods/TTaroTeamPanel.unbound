(def constant TT_TEAMPANEL_INSTALLED "true")

(def constant TP_PLAYER_ROW_SIZE {
	WIDTH: 200,
	HEIGHT: 27
})
(def constant TP_SHIPCONFIG_ELEMENT_WIDTH {
	WITH_UNIT: 48,
	NO_UNIT: 32
})
(def constant TP_DEFAULT_HEIGHT "160px")
(def constant TP_DIVISION_ELEMENT_WIDTH "20px")
(def constant TP_CONFIG_ELEMENTS_VGAP "3px")
(def constant TP_FLAGSHIP_COLOR_TRANSFORM {
	'ally'	: {redOffset: -256,	greenOffset: -127,	blueOffset: -0},	# blue-ish
	'enemy'	:{redOffset: -51,	greenOffset: -51,	blueOffset: -256},	# yellow-ish
})

(def constant TP_BANNED_SHIP_COLOR_TRANSFORM {
	redOffset: -256,	greenOffset: -256,	blueOffset: -256,	# black
})

(def constant TP_SHIP_ICON_COLOR_PRESET [
	#Use -(234-0x??)
	#None
	{
		Auxiliary:	{},
		AirCarrier:	{},
		Battleship:	{},
		Cruiser:	{},
		Destroyer: 	{},
		Submarine:	{},
	},
	#Aslain v1
	{
		Auxiliary:	{redOffset: -184, greenOffset: -134, blueOffset: -234, alphaOffset:    0},
		AirCarrier:	{redOffset: -106, greenOffset:  -64, blueOffset:   21, alphaOffset:    0},
		Battleship:	{redOffset:   21, greenOffset: -106, blueOffset: -106, alphaOffset:    0},
		Cruiser:	{redOffset:	  21, greenOffset: 	  0, blueOffset: -106, alphaOffset:    0},
		Destroyer: 	{redOffset:	 -64, greenOffset: 	 21, blueOffset: -106, alphaOffset:    0},
		Submarine:	{redOffset: -207, greenOffset:    4, blueOffset:   11, alphaOffset:    0},
	},
	#Aslain v2
	{
		Auxiliary:	{redOffset: -184, greenOffset: -134, blueOffset: -234, alphaOffset:    0},
		AirCarrier:	{redOffset:  -43, greenOffset: -106, blueOffset:   21, alphaOffset:    0},
		Battleship:	{redOffset:   21, greenOffset: -106, blueOffset: -106, alphaOffset:    0},
		Cruiser:	{redOffset:	  21, greenOffset: 	  0, blueOffset: -106, alphaOffset:    0},
		Destroyer: 	{redOffset:	 -64, greenOffset: 	 21, blueOffset: -106, alphaOffset:    0},
		Submarine:	{redOffset: -106, greenOffset:  -64, blueOffset:   21, alphaOffset:    0},
	},
	#AutoSpy
	{
		Auxiliary:	{redOffset: -184, greenOffset: -134, blueOffset: -234, alphaOffset: -128},
		AirCarrier:	{redOffset: -134, greenOffset: -134, blueOffset: -134, alphaOffset: -128},
		Battleship:	{redOffset: -234, greenOffset: -184, blueOffset: -154, alphaOffset: -128},
		Cruiser:	{redOffset: -89,  greenOffset: -159, blueOffset: -234, alphaOffset: -128},
		Destroyer: 	{redOffset: -184, greenOffset: -134, blueOffset: -184, alphaOffset: -128},
		Submarine:	{redOffset: -224, greenOffset: -224, blueOffset: -224, alphaOffset: -128},
	},
	#Roslich
	{
		Auxiliary:	{redOffset:   21, greenOffset: -234, blueOffset:   21, alphaOffset:    0},
		AirCarrier:	{redOffset:   21, greenOffset:   21, blueOffset: -234, alphaOffset:    0},
		Battleship:	{redOffset:   21, greenOffset: -234, blueOffset: -234, alphaOffset:    0},
		Cruiser:	{redOffset: -234, greenOffset: -234, blueOffset:   21, alphaOffset:    0},
		Destroyer: 	{redOffset: -234, greenOffset:    0, blueOffset: -234, alphaOffset:    0},
		Submarine:	{redOffset: -234, greenOffset:   21, blueOffset:   21, alphaOffset:    0},
	},
	#DeCease
	{
		Auxiliary:	{redOffset:   11, greenOffset: -235, blueOffset:   40, alphaOffset:    0},
		AirCarrier:	{redOffset:   -9, greenOffset:  -60, blueOffset: -119, alphaOffset:    0},
		Battleship:	{redOffset:  -65, greenOffset:  -74, blueOffset:   40, alphaOffset:    0},
		Cruiser:	{redOffset:   20, greenOffset:  -76, blueOffset: -128, alphaOffset:    0},
		Destroyer: 	{redOffset: -137, greenOffset:   11, blueOffset: -124, alphaOffset:    0},
		Submarine:	{redOffset: -255, greenOffset: -255, blueOffset: -255, alphaOffset:    0},
	},
	#Hakabase
	{
		Auxiliary:	{redOffset: -184, greenOffset: -134, blueOffset: -234, alphaOffset:  -70},
		AirCarrier:	{redOffset: -226, greenOffset:   -7, blueOffset:   21, alphaOffset:  -70},
		Battleship:	{redOffset:   21, greenOffset: -234, blueOffset: -234, alphaOffset:  -70},
		Cruiser:	{redOffset:	  21, greenOffset: 	 21, blueOffset: -234, alphaOffset:  -70},
		Destroyer: 	{redOffset:	-234, greenOffset: 	 21, blueOffset: -234, alphaOffset:  -70},
		Submarine:	{redOffset:   21, greenOffset: -234, blueOffset:  -81, alphaOffset:  -70},
	},
])
(def constant TP_CONCEALMENT_SKILL_ID {
	'AirCarrier': 45,
	#'Auxiliary': null,
	'Battleship': 12,
	'Cruiser': 12,
	'Destroyer': 12,
	#'Submarine': null
})
(def constant TP_CONCEALMENT_CREW_ID "-1") #Works until WG introduces the EPIC CONCEALMENT SKILL (hope that never happens)
(def constant TP_ATBA_SKILL_ID {
	'AirCarrier': 41,
	#'Auxiliary': null,
	'Battleship': 40,
	'Cruiser': 30,
	#'Destroyer': null,
	#'Submarine': null
})
(def constant TP_ATBA_CREW_ID "-1") #Works until WG introduces the EPIC ATBA SKILL (hope that never happens)

(def constant TP_COMPONENT_KEY_BANNED_SHIPS "'modTTaroTeamPanelBannedShips'")
(def constant TP_COMPONENT_KEY_CONSUMABLE_RANGES "'modTTaroTeamPanelConsumableRanges'")

(def constant TP_DISPLAY_MODES {
	DISABLE : 0,
	ENABLE  : 1,
	ADAPTIVE: 2,
})

(def constant TP_SHIPCONFIG_RENDERER_SETTINGS [
	{renderer: 'TP_ShipConfigVisibilityItem',			prefSubKey: 'VISIBILITY',			headerImage: 'url:../crew_commander/skills/detection_visibility_range.png',	headerTitle: 'IDS_SHIP_PARAM_DETECTION',	headerDescriptions: ['IDS_SHIP_PARAM_VISIBILITY_DIST_BY_SHIP','IDS_SHIP_PARAM_VISIBILITY_DIST_BY_PLANE']},
	{renderer: 'TP_ShipConfigMobilityItem',				prefSubKey: 'SPEED',				headerImage: 'url:../modules/icon_module_Engine_researched.png',			headerTitle: 'IDS_SHIP_PARAM_MAXSPEED',		headerDescriptions: ['IDS_SHIP_PARAM_MOBILITY','IDS_SHIP_PARAM_UNDERWATER_MOBILITY'], headerImageAlpha: 0.7 },
	{renderer: 'TP_ShipConfigAirSupportItem',			prefSubKey: 'AIRSUPPORT',			headerImage: 'url:../battle_hud/icon_frag/icon_frag_bomb.png',				headerTitle: 'IDS_SHIP_PARAM_AIR_SUPPORT',	headerDescriptions: ['IDS_SHIP_PARAM_MAX_DIST','IDS_SHIP_PARAM_SHOT_DELAY'], headerImageAlpha: 0.7},
	{renderer: 'TP_ShipConfigAirDefenseItem',			prefSubKey: 'ANTIAIR',				headerImage: 'url:../battle_hud/lower_log_modifiers/AAAuraDamage.png',		headerTitle: 'IDS_SHIP_PARAM_AIR_DEFENSE',	headerDescriptions: ['IDS_SHIP_PARAM_MAX_DIST','IDS_SHIP_PARAM_AIR_DEFENSE']},
	{renderer: 'TP_ShipConfigAtbaItem',					prefSubKey: 'ATBA',					headerImage: 'url:../battle_hud/icon_frag/icon_frag_atba.png',				headerTitle: 'IDS_SHIP_PARAM_ATBA',			headerDescriptions: ['IDS_SHIP_PARAM_MAX_DIST']},
	{renderer: 'TP_ShipConfigArtilleryItem',			prefSubKey: 'ARTILLERY',			headerImage: 'url:../modules/icon_module_Artillery_researched.png',			headerTitle: 'IDS_SHIP_PARAM_MAIN_GUN',		headerDescriptions: ['IDS_SHIP_PARAM_MAX_DIST','IDS_SHIP_PARAM_SHOT_DELAY']},
	{renderer: 'TP_ShipConfigTorpedoItem',				prefSubKey: 'TORPEDO',				headerImage: 'url:../modules/icon_module_Torpedoes_researched.png',			headerTitle: 'IDS_SHIP_PARAM_TORPEDOES',	headerDescriptions: ['IDS_SHIP_PARAM_MAX_DIST'], headerImageAlpha: 0.8},
	{renderer: 'TP_ShipConfigSurfaceConsumableItem',	prefSubKey: 'SURFACE_CONSUMABLE',	headerImage: 'url:../battle_hud/icon_frag/icon_frag_wave.png',				headerTitle: 'IDS_TITLE_CONSUMABLES',		headerDescriptions: ['IDS_DOCK_CONSUME_TITLE_PCY008_SONARSEARCH','IDS_DOCK_CONSUME_TITLE_PCY019_RLSSEARCH'], headerImageAlpha: 0.7},
	{renderer: 'TP_ShipConfigSubmarineConsumableItem',	prefSubKey: 'SUB_CONSUMABLE',		headerImage: 'url:../battle_hud/icon_frag/icon_frag_wave.png',				headerTitle: 'IDS_TITLE_CONSUMABLES',		headerDescriptions: ['IDS_DOCK_CONSUME_TITLE_PCY045_HYDROPHONE','IDS_DOCK_CONSUME_TITLE_PCY048_SUBMARINELOCATOR'], headerImageAlpha: 0.7},
])

(def css $TP_ShipConfigText()
	(extends $TextDefault13NM)
	(extends $FontEnableReadability)
)
(def css $TP_ShipConfigTextBold()
	(extends $TextDefaultBold13NM)
	(extends $FontEnableReadability)
)

#--------------------------------------------------------------------------------
# Main Elements
#--------------------------------------------------------------------------------
(def element TTaroTeamPanels () layout=true
	(scope
		(macro STAGE_SIZE)
		(macro TT_GET_USERPREF)
		(macro TT_GET_PREF_NUMBER _varName="'posYModifier'" _pref="TP_PREFS.POS_OFFSET_MODIFIER")
		(macro TT_GET_PREF_BOOL _varName="'isBlurMode'" _pref="TP_PREFS.BACKGROUND.MODE")

		(macro TT_GET_PREF_BOOL _varName="'isVisibleOnlyOnAlt'" _pref="TP_PREFS.ALL_ALT_VISIBLE")
		(var camera:gfx = "$datahub.getSingleComponent(CC.camera)")
		(var altVision:bool = "camera ? camera.altVision : false" (event "camera.evAltVisionChanged"))
		(var isiVisible:bool = "isVisibleOnlyOnAlt ? altVision : true")

		(var posY:number = "TP_DEFAULT_HEIGHT + (posYModifier * 10)")
	)
	(bindcall externalCall 'inputMapping.onAction' "['createParamsForAllShipsInBattle', {}]" on='addedToStage')
	# Hide the default Ub1 ears
	(bindcall externalCall 'direct.action' "['option.set', ['battle.ears.enabled', false]]" init=false watch=false on='addedToStage')

	(style
		(bind width "stageWidth")
		(bind height "stageHeight")
	)
	(controller $Instance renderer='DeclareBlurLayer'
		(bind enabled "isBlurMode")
		(exprs
			(style
				(zindex = "ZIndex.BACKGROUND")
			)
		)
	)

	(block
		(bind visible "isiVisible")
		(style
			(position = "absolute")
			(bind top "posY")
			(width = 100%)
		)
		(element TP_TeamPanelLeft _userPrefsNum="_userPrefsNum")
		(element TP_TeamPanelRight _userPrefsNum="_userPrefsNum")
	)
)

# Ally
(def element TP_TeamPanelLeft (_userPrefsNum:gfx=null)
	(scope
		(var avatarCollection:gfx = "$datahub.getCollection(CC.avatar)")
		(var allyCollection:gfx = "avatarCollection ? avatarCollection.getChildByPath('team.ally.sortedAlive') : null" (event "avatarCollection.evChildAdded") (event "avatarCollection.evChildRemoved"))
		(var allyItems:array = "allyCollection ? allyCollection.items : null" (event "allyCollection.evAdded") (event "allyCollection.evRemoved")  (event "allyCollection.evUpdated"))
		(var isEnabled:bool = "allyItems && allyItems.length > 0")
		(macro TT_GET_PREF_NUMBER _varName="'sizeScale'" _pref="TP_PREFS.SCALE_OFFSET")
	)

	(style
		(position = "absolute")
		(left = 0)
	)
	(macro BIND_FAIR_SCALE "sizeScale")

	(bind visible "isEnabled")

	(element TP_HeaderItem _isAlly="true" _userPrefsNum="_userPrefsNum")

	(controller $Repeat renderer='TP_PlayerItem'
		(bind count "allyCollection ? allyCollection.items.length : 0")
		(args "allyItems" _isAlly="true" _userPrefsNum="_userPrefsNum")

		(bindcall removeChildAt "$event[1]" (event "allyCollection.evRemoved"))
		(bindcall addChildAt "$event[1]" (event "allyCollection.evAdded"))
	)
)

# Enemy
(def element TP_TeamPanelRight (_userPrefsNum:gfx=null)
	(scope
		(var avatarCollection:gfx = "$datahub.getCollection(CC.avatar)")
		(var enemyCollection:gfx = "avatarCollection ? avatarCollection.getChildByPath('team.enemy.sortedAlive') : null" (event "avatarCollection.evChildAdded") (event "avatarCollection.evChildRemoved"))
		(var enemyItems:array = "enemyCollection ? enemyCollection.items : null" (event "enemyCollection.evAdded") (event "enemyCollection.evRemoved") (event "enemyCollection.evUpdated"))
		(var isEnabled:bool = "enemyItems && enemyItems.length > 0")
		(macro TT_GET_PREF_NUMBER _varName="'sizeScale'" _pref="TP_PREFS.SCALE_OFFSET")
	)

	(style
		(position = "absolute")
		(right = 0)
		(align="right")
		(pivotX = 100%)
	)
	(macro BIND_FAIR_SCALE "sizeScale")

	(bind visible "isEnabled")

	(element TP_HeaderItem _isAlly="false" _userPrefsNum="_userPrefsNum")

	(controller $Repeat renderer='TP_PlayerItem'
		(bind count "enemyCollection ? enemyCollection.items.length : 0")
		(args "enemyItems" _isAlly="false" _userPrefsNum="_userPrefsNum")

		(bindcall removeChildAt "$event[1]" (event "enemyCollection.evRemoved"))
		(bindcall addChildAt "$event[1]" (event "enemyCollection.evAdded"))
	)
)

# Header for ship configs
(def element TP_HeaderItem (_isAlly:bool=false, _userPrefsNum:gfx=null)
	(scope
		# To suppress error
		(var _entity:gfx = "null")
	)
	(style
		(bind flow "_isAlly ? Flow.HORIZONTAL : Flow.REVERSE_HORIZONTAL")
		(align = "center|middle")
		(height = 0)
		(marginTop = "-13")
	)
	# For margin
	(block
		(style
			(bind flow "_isAlly ? Flow.HORIZONTAL : Flow.REVERSE_HORIZONTAL")
		)
		(element TP_PlayerDivisionItem 		_entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum")
		(element TP_PlayerInfoItem 			_entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum")
		(element TP_PlayerClanIconItem 		_entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum")
		(element TP_ShipWeightItem 			_entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum" $enabled="MOD_TOURNAMENT_SHIPWEIGHT_DATA") #For tournament
		(element TP_ShipNationItem 			_entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum")
		(element TP_ShipTierItem 			_entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum")
		(element TP_ShipIconItem 			_entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum")
		(element TP_ShipDetectionItem		_entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum")
		(element TP_PlayerKillCountItem 	_entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum")
	)
	#

	# TODO
	# I really should move all these strings to constant
	# Maybe repace with repeat as well
	#
	(block
		(style
			(bind flow "_isAlly ? Flow.HORIZONTAL : Flow.REVERSE_HORIZONTAL")
			(hitTest = true)
		)

		(controller $Repeat renderer='TP_HeaderRendererItem' count="TP_SHIPCONFIG_RENDERER_SETTINGS.length"
			(args
				_userPrefsNum = "_userPrefsNum"
			)
		)
	)

	# Mod Config
	(element TT_ConfigButtonElement _modIndex = "5" _tooltipPosition="borderNoTrack"
		(style
			(position = "flow")
		)
	)
)

(def element TP_HeaderRendererItem(_userPrefsNum:gfx=null)
	(scope
		(var settings:dict = "TP_SHIPCONFIG_RENDERER_SETTINGS[$index]")
		(var headerAlpha:number = "'headerAlpha' in settings ? settings.headerAlpha : 1")

		(var camera:gfx = "$datahub.getSingleComponent(CC.camera)")
		(var altVision:bool = "camera ? camera.altVision : false" (event "camera.evAltVisionChanged"))

		(macro TT_GET_PREF_NUMBER	_varName="'displayMode'"	_pref="TP_PREFS[settings.prefSubKey].DISPLAY_MODE")
		(macro TP_GET_DISPLAY_MODE	_varName="'isEnabled'"		_prefValue="displayMode")
	)
	(bind visible "isEnabled")

	(element TP_ShipConfigImageItem
		_iconPath		= "settings.headerImage"
		_alpha			= "headerAlpha"
		_tooltipTitle	= "settings.headerTitle"
		_tooltipTexts	= "settings.headerDescriptions"
		_userPrefsNum	= "_userPrefsNum"
	)
)

# Player
(def element TP_PlayerItem (_items:array, _isAlly:bool=false, _userPrefsNum:gfx=null)
	(scope
		(event evMouseOver)
		(event evMouseOut)

		(var _entity:gfx = "_items[$index]" watch=false)
		(var _index:number = "indexOf(_entity, _items)")
		(var healthComponent:gfx = "_entity.hasComponent(CC.health) ? _entity.health : null" (event "_entity.evAdded")(event "_entity.evRemoved"))
		(var isAlive:bool = "healthComponent ? healthComponent.isAlive : false" (event "healthComponent.evIsAliveChanged"))
		#For tooltip
		(event evHideInfotip)
		(event evMenuItemClicked) #maybe unnecessary?
		(var selfPlayer:gfx = "$datahub.getSingleEntity(CC.playerAvatar)")
		(var isSelf:bool = "selfPlayer.id == _entity.id")
		(var isBot:bool = "_entity && _entity.avatar.isBot")
		(var isContextMenuAvailable:bool = "!(isSelf || isBot)")
		(var mouse:gfx = "$datahub.getSingleComponent(CC.mouse)")
		(var isMouseActive:bool = "mouse.active" (event "mouse.evActiveChanged"))

		(macro TT_GET_PREF_BOOL _varName="'isDeadPlayerVisible'" _pref="TP_PREFS.DEAD_PLAYER_VISIBLE")
		(var battleDataEntity:gfx = "$datahub.getSingleEntity(CC.battleData)")
		(var gameModeId:number = "battleDataEntity.battleInfo.gameModeId")
		(var isScenarioMode:bool = "SC.Battle.GAME_MODE.PVE == gameModeId")
		(var isScenarioBot:bool = "isBot && isScenarioMode")
		(var isVisible:bool = "(isDeadPlayerVisible && !(isBot && isScenarioMode)) ? true : isAlive")

		(macro TT_GET_PREF_NUMBER _varName="'blurDisplayMode'" _pref="TP_PREFS.BACKGROUND.DISPLAY_MODE")
		(macro TT_GET_PREF_NUMBER _varName="'blurAlpha'" _pref="TP_PREFS.BACKGROUND.ALPHA")
		(macro TT_GET_PREF_BOOL _varName="'isBlurMode'" _pref="TP_PREFS.BACKGROUND.MODE")
		(var camera:gfx = "$datahub.getSingleComponent(CC.camera)")
		(var altVision:bool = "camera ? camera.altVision : false" (event "camera.evAltVisionChanged"))
		(macro TP_GET_DISPLAY_MODE _varName="'isBlurVisible'" _prefValue="blurDisplayMode")
		(var hoverBackground:str = "_isAlly ? 'ally_bg_panel' : 'enemy_bg_panel'")
		(var hoverBackgroundUrl:str = "'url:../service_kit/panel_backgrounds/' + hoverBackground + '.png'")

		(var elemWidth:number = "floor($globalLayoutBounds[2]) + 15" (event "$evLayoutBoundsChanged"))
		# For some really weird reason, tooltip controller and (position="border") have an issue with tracking the border
		# It tracks the border size only when making the elements larger
		# But it does not reflect the size down e.g. (visible = false)
		# Thus once the elements get expanded the border tooltip does not come back to the original position
		# I have to manually do the calculation here :(

		(event evAddedToStage)
		(var appearDelay:number = "1.5 + $index * 0.15")
	)
	# For tooltip
	(dispatch evHideInfotip args="{}" (bind trigger "isMouseActive") (event "evMenuItemClicked"))
	(dispatch evAddedToStage args="{}" on=addedToStage)

	(style
		(backgroundColor = 0x00FFFFFF) # For seamless hittest. Do not use 0x01000000 because it will have a visible dark color!

		# (position = "absolute") is required to separate the argument entity and the position of this element within parent layout.
		# With auto positioning, the layout of elements remains the same - but the argument entities change.
		# In that case, the spotted indicator or any element that uses (watch=false) variable within their scope can break.
		(position = "absolute")
		(bind left "_isAlly ? 0 : auto")
		(bind right "_isAlly ? auto : 0")
		(bind top "_index == 0 ? 0 : (_index * (TP_PLAYER_ROW_SIZE.HEIGHT + 2)) + 2")

		(alpha = 0)
	)
	(controller $Animation
		(bindcall play
			delay	 = "appearDelay"
			duration = 0.3
			from	 = "{ alpha: 0 }"
			to		 = "{ alpha: 1 }"
			watch	 = false
			(event "evAddedToStage")
		)
	)

	(bind visible "isVisible")

	(element TP_ContrastPanel _isBlur="isBlurMode" _intensity="blurAlpha"
		(bind visible "isBlurVisible")
	)

	(element TP_HorizontalDividerTwoPx
		(bind visible "_index == 0")
	)
	
	# Ally: hblock, Enemy: reverse hblock
	(block
		(style
			(height = "TP_PLAYER_ROW_SIZE.HEIGHT")
			(hitTest = true)
		)

		(dispatch evMouseOver args={} on='rollOver')
		(dispatch evMouseOut  args={} on='rollOut')

		# Hover animation
		(block
			(class $FullsizeAbsolute)
			(style
				(bind backgroundImage "hoverBackgroundUrl")
				(scale9grid = 3)
				(alpha = 0)
			)
			(controller $Animation
				(bindcall play  duration=0.15
								to="{ alpha: 1 }"
								(event "evMouseOver")
				)
				(bindcall play  duration=0.15
								to="{ alpha: 0 }"
								(event "evMouseOut")
				)
			)
		)

		(element TP_ShipHealthBarItem _entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum")

		(hblock
			(style
				(align = "center|middle")
				(bind alpha "isAlive ? 1.0 : 0.4")
				(bind flow "_isAlly ? Flow.HORIZONTAL : Flow.REVERSE_HORIZONTAL")
				(hitTest = false)
			)
			(element TP_PlayerDivisionItem 		_entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum")
			(element TP_PlayerInfoItem 			_entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum")
			(element TP_PlayerClanIconItem 		_entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum")
			(element TP_ShipWeightItem 			_entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum" $enabled="MOD_TOURNAMENT_SHIPWEIGHT_DATA") #For tournament
			(element TP_ShipNationItem 			_entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum")
			(element TP_ShipTierItem 			_entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum")
			(element TP_ShipIconItem 			_entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum")
			(element TP_ShipDetectionItem		_entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum")
			(element TP_PlayerKillCountItem 	_entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum")
			(element TP_ShipConfigurationsItem 	_entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum")
			(element TP_ShipConsumablesItem		_entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum" $enabled="TT_CONSUMABLESMONITOR_INSTALLED")
			(element TP_ShipDamageItem			_entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum" $enabled="TT_DAMAGEMONITOR_INSTALLED")
		)

		# Tooltip for Detailed Ship Stats
		(controller $Tooltip
			(renderer = 'TP_TooltipShipConfigurationsItem')
			(args "_entity" _userPrefsNum="_userPrefsNum")
			(macro TP_TOOLTIP_BEHAVIOUR "_isAlly")
		)

		# Context Menu for Report/Compliment/Division
		(controller $Tooltip (renderer = 'ContextMenuPlayer')
			(bind enabled "isContextMenuAvailable")
			(args _playerEntity="_entity" _selfPlayer="selfPlayer")
			(macro DEFAULT_MENU_BEHAVIOUR "evHideInfotip" "1")
			(cache=false)
		)
	)

	(element TP_HorizontalDividerTwoPx)
)

# Player Info
(def element TP_PlayerInfoItem (_entity:gfx=null, _isAlly:bool=false, _userPrefsNum:gfx=null)
	(scope
		#bar width
		(macro TT_GET_PREF_NUMBER _varName="'widthScale'" _pref="TP_PREFS.HEALTHBAR_WIDTH")
		(var widthSize:number = "TP_PLAYER_ROW_SIZE.WIDTH * widthScale - TP_DIVISION_ELEMENT_WIDTH") # - (division item width - 5). Canbe replaced with margin though
	)
	
	(style
		(align = "center|middle")
		(bind marginRight "_isAlly ? 5px : auto")
		(bind marginLeft "_isAlly ? auto : 5px")
		
		(bind width "widthSize")
		(height = "TP_PLAYER_ROW_SIZE.HEIGHT")
	)

	(vtile
		(style
			(width = 100%)
			(vgap = 2px)
		)
		(element TP_PlayerNameWithTagItem 	"_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum")
		(element TP_ShipNameItem 			"_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum")
	)
)

(def element TP_PlayerDivisionItem (_entity:gfx=null, _isAlly:bool=false, _userPrefsNum:gfx=null)
	(scope
		(var divisionMemberComponent:gfx = "_entity && _entity.hasComponent(CC.divisionMember) ? _entity.divisionMember : null" (event "_entity.evAdded")(event "_entity.evRemoved"))
		(var divisionSign:number = "divisionMemberComponent ? divisionMemberComponent.divisionSign : null" (event "divisionMemberComponent.evDivisionChanged"))
		(var isInSameDivision:bool = "divisionMemberComponent ? divisionMemberComponent.isInSameDivision : false" (event "divisionMemberComponent.evDivisionChanged"))
		(var division:number = "divisionMemberComponent ? divisionMemberComponent.division : 0" (event "divisionMemberComponent.evDivisionChanged"))
		(var isInDivision:bool = "division > 0")
		(var isDivisionHidden:bool = "divisionMemberComponent ? divisionMemberComponent.divisionHidden : false" (event "divisionMemberComponent.evDivisionHiddenChanged"))
		(var divisionIconIndex:number = "isInSameDivision ? (divisionSign + 1) : (divisionSign + 1 + 10)")

		(var contactComponent:gfx = "_entity && _entity.hasComponent(CC.contact) ? _entity.contact : null" (event "_entity.evAdded")(event "_entity.evRemoved"))
		(var isIgnored:bool = "contactComponent ? contactComponent.isIgnored : false" (event "contactComponent.evIsIgnoredChanged"))

		(var avatarComponent:gfx = "_entity ? _entity.avatar : null")
		(var isMuted:bool = "avatarComponent ? avatarComponent.mute : false" (event "avatarComponent.evMuteChanged"))

		(var isTextChatMuted:bool = "isMuted || isIgnored")
	)

	(style
		(width = "TP_DIVISION_ELEMENT_WIDTH")
		(height = 100%)
		(align = "middle|center")
	)
	
	(mc division_item
		(bind visible "isInDivision && !isDivisionHidden")
		(bindcall gotoAndStop "divisionIconIndex" init=true)
	)
	(block
		(class $FullsizeAbsolute)
		(style
			(bind align "_isAlly ? left : right")
		)
		(bind visible "isTextChatMuted")
		(mc icon_text_chat_small
			(bindcall gotoAndStop "'muted'" init=true)
			(style
				(bind scaleX "_isAlly ? 1 : -1")
				(pivotX = 50%)
			)	
		)
	)
)

(def element TP_PlayerClanIconItem (_entity:gfx=null, _isAlly:bool=false, _userPrefsNum:gfx=null)
	(scope
		(var clanComponent:gfx = "_entity && _entity.hasComponent(CC.clanman) ? _entity.clanman : null")
		(var clanId:number = "clanComponent ? clanComponent.clanId : null" (event "clanComponent.evClanIdChanged"))
		(var clanEntity:gfx = "$datahub.getPrimaryEntity(CC.clan, clanId)")
		(var clanName:str = "clanEntity ? clanEntity.clan.tag : null" (event "clanEntity.clan.evTagChanged"))
		(var clanIcon:str = "'url:../clan_icons/' + clanName + '.png'")
		(macro TT_GET_PREF_BOOL _varName="'isClanIconVisible'" _pref="TP_PREFS.CLAN_ICON")
	)
	(style
		(align = "middle|center")
	)
	(bind visible "isClanIconVisible")
	(block
		(style
			(bind backgroundImage "clanIcon")
			(width = 24)
			(height = 24)
			#(backgroundSize = "fill")
		)
	)
)

(def element TP_PlayerNameWithTagItem (_entity:gfx=null, _isAlly:bool=false, _userPrefsNum:gfx=null)
	(scope
		(macro TT_GET_PREF_BOOL _varName="'isClanNameVisible'" _pref="TP_PREFS.CLAN_NAME")
		(var isInClan:bool = "_entity ? _entity.hasComponent(CC.clanman) : false")
		(var clanComponent:gfx = "isInClan ? _entity.clanman : null")
		(var clanId:number = "clanComponent ? clanComponent.clanId : null" (event "clanComponent.evClanIdChanged"))
		(var clanEntity:gfx = "$datahub.getPrimaryEntity(CC.clan, clanId)")
		(var clanName:str = "clanEntity ? clanEntity.clan.tag : null" (event "clanEntity.clan.evTagChanged"))
		(var clanNameWithBrackets:str = "isInClan && isClanNameVisible ? '[' + clanName + ']' : ''")

		(macro TT_GET_PREF_BOOL _varName="'isPlayerNameVisible'" _pref="TP_PREFS.PLAYER_NAME")
		(var pureName:str = "(isPlayerNameVisible && _entity) ? _entity.avatar.pureName : ' '")

		(macro TP_GET_MARKER_DATA "_entity")

		(var colorClass:str = "isGolden ? '$FontColorGolden' : '$FontColorWhite' ")
		(var fontColor:number = "FONT_CLASS_TO_COLOR[colorClass]")
	)
	
	(style
		(width = 100%)
		(bind align "_isAlly ? left|middle : right|middle")
	)

	(bind visible "isClanNameVisible || isPlayerNameVisible")

	(tf
		(class $TextDefault13NM)
		(class $FontEnableReadability)
		(alpha = 0.95)
		(style
			(width = "100%")
			(elideMode = true)
			(bind textColor "fontColor")
			(bind textAlign "_isAlly ? left : right")
		)
		(bind text "clanNameWithBrackets + pureName")
	)
)

(def element TP_PlayerKillCountItem (_entity:gfx=null, _isAlly:bool=false, _userPrefsNum:gfx=null)
	(scope
		(var killCount:number = "_entity ? _entity.avatar.frags : 0" (event "_entity.avatar.evFragsChanged"))
		(macro TT_GET_PREF_BOOL _varName="'isPlayerKillCountVisible'" _pref="TP_PREFS.KILL_COUNT")
	)
	(style
		(width = 18px)
		(align = "middle|center")
	)
	(bind visible "isPlayerKillCountVisible")
	(tf
		(class $TextDefaultBoldNM)
		(class $FontEnableReadability)
		(bind text "killCount ? killCount : ''")
	)
)

# Ship Info
(def element TP_ShipIconItem(_entity:gfx=null, _isAlly:bool=false, _userPrefsNum:gfx=null)
	(scope
		(macro TP_GET_MARKER_DATA "_entity")
		(macro TT_GET_PREF_BOOL _varName="'isShipIconStatusColor'" _pref="TP_PREFS.SHIP_ICON_STATUS")
		(var isIconGolden:bool = "isGolden && isShipIconStatusColor")
		(var isIconTkStatus:bool = "tkStatus && isShipIconStatusColor")
		(var markerColorName:str =
			"	!isAlive			? 'sunk' :
				isIconGolden		? 'division' :
				isIconTkStatus		? 'teamkiller' :
				'white'
			"
		)

		(var iconName:str = "'icon_' + markerColorName + '_' + shipType")

		(macro TT_GET_PREF_BOOL _varName="'isShipIconVisible'" _pref="TP_PREFS.SHIP_ICON")
		(macro TT_GET_PREF_NUMBER _varName="'shipIconColorIndex'" _pref="TP_PREFS.SHIP_ICON_COLOR")
		(var isColorAvailable:bool = "!(isIconGolden || isIconTkStatus)")
		(var colorPreset:dict = "(TP_SHIP_ICON_COLOR_PRESET.length > shipIconColorIndex) ? TP_SHIP_ICON_COLOR_PRESET[shipIconColorIndex] : null")
		(var colorDict:dict = "(isColorAvailable && colorPreset) ? colorPreset[subType] : {}")
	)

	(style
		(width = "SHIP_ICON_SIZE.WIDTH")
		(height = "SHIP_ICON_SIZE.HEIGHT")
		(bind scaleX "_isAlly ? 1.0 : -1.0")
		(pivotX = "SHIP_ICON_SIZE.WIDTH/2")
	)
	(bind visible "isShipIconVisible")

	(block
		(style
			(bind backgroundImage "'url:../battle_hud/markers/ship/' + iconName + '.png'")
		)
	)
	(block
		(bind colorTransform "colorDict")
		(style
			(bind backgroundImage "'url:../battle_hud/markers/ship/' + iconName + '.png'")
		)
	)
)

(def element TP_ShipNameItem(_entity:gfx=null, _isAlly:bool=false, _userPrefsNum:gfx=null)
	(scope
		(var shipEntity:gfx = "_entity ? _entity.avatar.ship.ref.ship : null" (event "_entity.avatar.evShipRefChanged"))
		(var shipName:str = "shipEntity ? tr(shipEntity.nameIDS) : ''") #IDS_PASB518
		(macro TP_GET_ISAFK _entity="_entity")
		(macro TT_GET_PREF_BOOL _varName="'isShipNameVisible'" _pref="TP_PREFS.SHIP_NAME")
		
		(var colorClass:str = "	isAFK		? '$FontColorOrange' :
								isGolden	? '$FontColorGolden' :
								tkStatus	? '$FontColorTeamkiller'
											: '$FontColorWhite' "
		)
		(var fontColor:number = "FONT_CLASS_TO_COLOR[colorClass]")
	)

	(bind visible "isShipNameVisible")

	(style
		(bind align "_isAlly ? left|middle : right|middle")
		(width = 100%)
	)

	(tf
		(class $TextDefaultBoldNM)
		(style
			(width = 100%)
			(elideMode = true)
			(bind textColor "fontColor")
			(bind textAlign "_isAlly ? left : right")
		)
		(bind text "shipName")
	)
)

(def element TP_ShipNationItem(_entity:gfx=null, _isAlly:bool=false, _userPrefsNum:gfx=null)
	(scope
		(var shipEntity:gfx = "_entity ? _entity.avatar.ship.ref.ship : null" (event "_entity.avatar.evShipRefChanged"))
		(var flagName:str = "shipEntity ? shipEntity.flagName : ''") #IDS_PASB518
		(macro TT_GET_PREF_BOOL _varName="'isShipNationVisible'" _pref="TP_PREFS.SHIP_NATION")
	)

	(style
		(width = "TP_PLAYER_ROW_SIZE.HEIGHT")
		(height = "TP_PLAYER_ROW_SIZE.HEIGHT")
		(marginLeft = 4px)
		(marginRight = 4px)
		(align = "middle|center")
		(backgroundSize = "fill")
		(bind backgroundImage "flagName ? 'url:../nation_flags/tiny/flag_' + flagName + '.png' : ''")
	)
	(bind visible "isShipNationVisible")
)

# For Tournamnet
(def element TP_ShipWeightItem(_entity:gfx=null, _isAlly:bool=false, _userPrefsNum:gfx=null)
	(scope
		(var shipEntity:gfx = "_entity ? _entity.avatar.ship.ref.ship : null" (event "_entity.avatar.evShipRefChanged"))
		(var shipId:str = "shipEntity ? toString(shipEntity.id) : ''") #uint long

		(var shipWeightData:dict = "shipId in MOD_TOURNAMENT_SHIPWEIGHT_DATA ? MOD_TOURNAMENT_SHIPWEIGHT_DATA[shipId] : {}")

		# Weight
		(var weight:number = "'WEIGHT' in shipWeightData ? shipWeightData.WEIGHT : 0")
		(var weightText:str = "_entity ? weight : ''")
	)
	(style
		(width = 20px)
		(align = "center")
	)
	(tf
		(class $TextDefaultBoldNM)
		(class $FontEnableReadability)
		(bind text "weightText")
	)
)

(def element TP_ShipDamageItem(_entity:gfx=null, _isAlly:bool=false, _userPrefsNum:gfx=null)
	(scope
		(event evShow)

		(var avatarId:str = "_entity ? _entity.avatar.id : 0")

		(macro IS_SPECTATOR_MODE)

		# Inflicted Damage Data Entity
        (var iDamageEntityWatcher:gfx = "$datahub.getPrimWatcher(CC.mods_DataComponent, DMonitor_INFLICTED_DAMAGE_COMPONENT_KEY)")
		(var iDamageEntity:gfx = "iDamageEntityWatcher.entity" (event "iDamageEntityWatcher.event"))

		(var animatedDamage:number = "0" watch=false)

		(var iDamageDataComponent:gfx = "iDamageEntity ? iDamageEntity.mods_DataComponent : null")
		(var inflictedDamageData:dict = "iDamageDataComponent ? iDamageDataComponent.data : {}" (event "iDamageDataComponent.evDataChanged"))
		(var inflictedDamage:dict = "avatarId in inflictedDamageData ? inflictedDamageData[avatarId] : {}")
        (var totalDamage:number = "'totalDamage' in inflictedDamage ? inflictedDamage.totalDamage : 0")

		(controller $Animation
            # Increasing damage
			(bindcall play	duration = 0.6
							to = "{ animatedDamage: totalDamage}"
							easing="Easing.cubic_out"
							(bind trigger "totalDamage")
							(event "evShow")
			)
		)
	)

	(bind visible "iDamageEntity && isSpectatorTrainingMode")

	(dispatch evShow on='addedToStage')

	(style
		(width = 65px)
		(align = "center")
	)
	(tf
		(class $TextDefaultBold18NM)
		#(class $FontEnableReadability)
		(style
			(width = 100%)
			(textAlign = "right")
			(bind textColor "_isAlly ? 0xFFCCFF99 : 0xFFFF9933")
		)
		(bind text "formatSeparator(ceil(animatedDamage))")
	)
)
#

(def element TP_ShipTierItem(_entity:gfx=null, _isAlly:bool=false, _userPrefsNum:gfx=null)
	(scope
		(var shipEntity:gfx = "_entity ? _entity.avatar.ship.ref.ship : null" (event "_entity.avatar.evShipRefChanged"))
		(var levelRome:str = "shipEntity ? shipEntity.levelRome : ''") #IDS_PASB518
		(macro TT_GET_PREF_BOOL _varName="'isShipTierVisible'" _pref="TP_PREFS.SHIP_TIER")
		(macro TT_GET_PREF_BOOL _varName="'isPremiumHighlighted'" _pref="TP_PREFS.PREMIUM_TIER")

		(var isPremium:bool = "shipEntity ? shipEntity.isPremium : false") #IDS_PASB518
		(var fontColor:number = "isPremium && isPremiumHighlighted ? FONT_CLASS_TO_COLOR['$FontColorGolden'] : FONT_CLASS_TO_COLOR['$FontColorWhite']")
	)
	(style
		(width = 22px)
		(align = "center")
	)
	(bind visible "isShipTierVisible")
	(tf
		(class $TextDefaultBoldNM)
		(class $FontEnableReadability)
		(style
			(bind textColor "fontColor")
		)
		(bind text "levelRome")
	)
)

(def element TP_ShipDetectionItem(_entity:gfx=null, _isAlly:bool=false, _userPrefsNum:gfx=null)
	(scope
		# I should really rewrite this section because it's so dented

		(var _markerEntity:gfx = "_entity")

		#map visible		
		(macro GET_MARKER_ENTITY_COMPONENT 'visibility')
		(var mapVisible:bool = "visibilityComponent ? visibilityComponent.mapVisible : false" (event "visibilityComponent.evChanged"))

		#relation
		(var playerAvatar:gfx = "$datahub.getSingleEntity(CC.playerAvatar)")
		(var isObserver:bool = "!playerAvatar")
		(macro GET_MARKER_ENTITY_COMPONENT 'relation')
		(var isAlly:bool = "relationComponent && isIn(relationComponent.value, [SC.Battle.PLAYER_RELATION.ALLY, SC.Battle.PLAYER_RELATION.SELF])" (event "relationComponent.evChanged"))

		#visibility flag
		(macro GET_MARKER_ENTITY_COMPONENT 'vehicle')
		(var visibilityFlag:bool = "vehicleComponent ? vehicleComponent.visibilityFlags : false" (event "vehicleComponent.evVisibilityFlagsChanged"))

		#fix for hydrophone detection with no visual contact
		(var isMapVisibleEnabled:bool = "!(isAlly || isObserver)")
		(var hasMapPosition:bool = "_markerEntity ? _markerEntity.hasComponent(CC.mapPosition) : false" watch=false)
		(bind hasMapPosition "!hasMapPosition && $event.classID == CC.mapPosition ? true : false" watch=false init=false (event "_markerEntity.evAdded"))
		(event evMapPositionAdded)
		(dispatch evMapPositionAdded watch=false init=false (bind enabled "!hasMapPosition && isMapVisibleEnabled") (bind trigger "hasMapPosition"))

		(var isDetected:bool = "visibilityFlag || (isMapVisibleEnabled && mapVisible)")
		(var wasDetected:bool = "false" watch=false)

		(event evVisibilityChanged)
		(dispatch evVisibilityChanged args="{}" watch=false init=false (bind enabled "!(wasDetected) && isDetected") (bind trigger "isDetected"))
		(bind wasDetected "true" watch=false init=false (event "evMapPositionAdded")(event "evVisibilityChanged"))

		(macro GET_MARKER_ENTITY_COMPONENT 'health')
		(var isAlive:bool = "healthComponent ? healthComponent.isAlive : false" (event "healthComponent.evIsAliveChanged"))
		(macro TT_GET_PREF_BOOL _varName="'isShipDetectionVisible'" _pref="TP_PREFS.SHIP_DETECTION")
		(var iconColorTransform:dict = "isDetected  ? {redMultiplier:0,greenMultiplier:0,blueMultiplier:0,alphaMultiplier:1.0,redOffset:0xFF,greenOffset:0x99,blueOffset:0x33,alphaOffset:0 }
													: {redMultiplier:0,greenMultiplier:0,blueMultiplier:0,alphaMultiplier:0.6,redOffset:0xFF,greenOffset:0xFF,blueOffset:0xFF,alphaOffset:0 }")
	)
	(style
		(align = "center|middle")
		(bind alpha "_entity ? 1.0 : 0.0")
		(width = "14")
	)
	(bind visible "isShipDetectionVisible")
	(block
		(bind visible "isAlive && (isDetected || wasDetected)")
		(controller $Sector
			(bind color "0xFFFFFFFF")
			(bind arc "360")
			(bind radius "4")
		)
		(bind colorTransform "iconColorTransform")
	)
)

(def element TP_ShipHealthBarItem(_entity:gfx=null, _isAlly:bool=false, _userPrefsNum:gfx=null)
	(scope
		# Entity
		(var _markerEntity:gfx = "_entity")

		# Multi Teams
		(var customElementsVisibilityComponent:gfx = "$datahub.getSingleEntity(CC.customElementsVisibility)")
		(var enabledElements:number = "customElementsVisibilityComponent ? customElementsVisibilityComponent.customElementsVisibility.enabledElements : null" (event "customElementsVisibilityComponent.customElementsVisibility.evChanged"))
		(var isMultyTeamEnabled:bool = "(enabledElements & SC.Battle.CUSTOM_BATTLE_ELEMENTS.MULTYTEAMS) > 0")

		# Health
		(macro GET_MARKER_ENTITY_COMPONENT 'health')
		(var isAlive:bool = "healthComponent ? healthComponent.isAlive : false" (event "healthComponent.evIsAliveChanged"))
		(var healthValue:number = "healthComponent ? healthComponent.value : 0" (event "healthComponent.evValueChanged"))
		(var healthMax:number = "healthComponent ? healthComponent.max : 0" (event "healthComponent.evMaxChanged"))
		(var healthRatio:number = "(isAlive && healthValue == 0) || (healthMax == 0) 
										? 1
										: healthValue / healthMax"
		)

		# Regeneration
		(macro GET_MARKER_ENTITY_COMPONENT 'dataComponent')
		(var regenMaxValue:number = "dataComponentComponent ? dataComponentComponent.data.maxValue : 0" (event "dataComponentComponent.evDataChanged"))
		(var regenRatio:number = "healthMax ? regenMaxValue / healthMax : 0")

		# Relation
		(macro GET_MARKER_ENTITY_COMPONENT 'avatar')
		(var teamId:number = "avatarComponent ? avatarComponent.teamId : 0" (event "avatarComponent.evTeamIdChanged"))
		(macro GET_MARKER_ENTITY_COMPONENT 'relation')
		(var relationValue:number = "relationComponent ? relationComponent.value : 0" (event "relationComponent.evChanged"))
		(var relationStr:str = "toLower(SC.Battle.PLAYER_RELATION.VALUE_TO_NAME[relationValue])")
		(var isAlly:bool = "relationComponent && isIn(relationValue, [SC.Battle.PLAYER_RELATION.ALLY, SC.Battle.PLAYER_RELATION.SELF])")
		(var isSelf:bool = "relationComponent && relationValue == SC.Battle.PLAYER_RELATION.SELF")

		# Diplomacy
		(macro GET_MARKER_ENTITY_COMPONENT 'diplomacyRelation')
		(var diplomacyRelationValue:number = "diplomacyRelationComponent ? diplomacyRelationComponent.value : 0" (event "diplomacyRelationComponent.evChanged"))
		(var relationStrByDiplomacy:str = "DIPLOMACY_RELATION_TO_RELATION_STR[diplomacyRelationValue]")

		# Flagship for Tournament
		(var shipEntity:gfx = "avatarComponent ? avatarComponent.ship.ref.ship : null" (event "avatarComponent.evShipRefChanged"))
		(var shipId:str = "shipEntity ? toString(shipEntity.id) : ''")

		(var shipWeights:dict = "{}" watch=false)
		(bind shipWeights "MOD_TOURNAMENT_SHIPWEIGHT_DATA" $enabled="MOD_TOURNAMENT_SHIPWEIGHT_DATA") # Error supression
		(var shipWeightData:dict = "shipId in shipWeights ? shipWeights[shipId] : {}")

		(var isFlagShip:bool = "'FLAGSHIP' in shipWeightData ? shipWeightData.FLAGSHIP : false")
		(var flagShipColorKey:str = "isAlly ? 'ally' : 'enemy'")

		# Ship Restrictions
		(var shipFullName:str = "shipEntity ? shipEntity.fullName : ''")
		(var bannedShipsEntityWatcher:gfx = "$datahub.getPrimWatcher(CC.mods_DataComponent, TP_COMPONENT_KEY_BANNED_SHIPS)")
		(var bannedShipsEntity:gfx = "bannedShipsEntityWatcher.entity" (event "bannedShipsEntityWatcher.event"))
		(var bannedShipsDataComponent:gfx = "bannedShipsEntity ? bannedShipsEntity.mods_DataComponent : null" (event "bannedShipsEntity.evAdded"))
		(var bannedShipsByTeam:dict = "bannedShipsDataComponent ? bannedShipsDataComponent.data.bannedShipsByTeam : {}" (event "bannedShipsDataComponent.evDataChanged"))
		(var teamIdStr:str = "toString(teamId)")
		(var bannedShips:array = "teamIdStr in bannedShipsByTeam ? bannedShipsByTeam[teamIdStr] : []")
		(var isBannedShip:bool = "shipFullName in bannedShips")

		# Bar Color
		(macro TT_GET_PREF_NUMBER _varName="'alphaScale'" _pref="TP_PREFS.HEALTHBAR_OPACITY")
		(var regenBarColorTransform:dict = "{redMultiplier:0,greenMultiplier:0,blueMultiplier:0,alphaMultiplier:1.0,redOffset:230,greenOffset:230,blueOffset:230,alphaOffset:0 }")
		(var markerColorTransform:dict = 
			"	isBannedShip				? TP_BANNED_SHIP_COLOR_TRANSFORM :
				isFlagShip					? TP_FLAGSHIP_COLOR_TRANSFORM[flagShipColorKey] :
				diplomacyRelationComponent	? TWO_TEAMS_COLOR_TRANSFORMS[relationStrByDiplomacy] :
				isSelf						? {redOffset: -213,	greenOffset: -90,	blueOffset: -178} :
				isAlly						? TWO_TEAMS_COLOR_TRANSFORMS['ally'] :
				isMultyTeamEnabled			? MULTI_TEAMS_COLOR_TRANSFORMS[teamId]
											: TWO_TEAMS_COLOR_TRANSFORMS[relationStr]"
		)
		(var bgAlpha:number = "alphaScale <= 0 ? 0 : 0.8")

		# Bar Width
		(macro TT_GET_PREF_NUMBER _varName="'widthScale'" _pref="TP_PREFS.HEALTHBAR_WIDTH")
	)

	(style
		(position = "absolute")
		(bind scaleX "(_isAlly ? 1.0 : -1.0) * widthScale")
		(bind left "_isAlly ? 0 : auto")
		(bind right "_isAlly ? auto : 0")
		(pivotX = "0")
		(pivotY = "0")
		(width = "TP_PLAYER_ROW_SIZE.WIDTH")
		(height = "TP_PLAYER_ROW_SIZE.HEIGHT")
		(align = "center|middle")
		(hitTest = false)
	)

	(block
		(class $FullsizeAbsolute)
		
		(block
			(class $FullsizeAbsolute)
			(style
				(backgroundImage = "'url:../battle_hud/markers/bar/bar_bg.png'")
				(backgroundSize = "fill")
				(scale9grid = [1, 1, 44, 2])
				(bind alpha "bgAlpha")
			)
		)

		(block
			(class $FullsizeAbsolute)
			(bind alpha "alphaScale")
			(bind visible "isAlive")
			(blendMode = layer)
			(tf)
			# Regen
			(block
				(class $FullsizeAbsolute)
				(style
					(bind backgroundColor "0xFFFFFFFF")
					(backgroundSize = "fill")
					(bind scaleX "regenRatio")
				)
				(bind colorTransform "regenBarColorTransform")
			)

			# Health
			(block
				(class $FullsizeAbsolute)
				(style
					(bind backgroundColor "0xFFFFFFFF")
					(backgroundSize = "fill")
					(bind scaleX "healthRatio")
				)
				(bind colorTransform "markerColorTransform")
			)
		)
	)
)

(def element TP_ContrastPanel(_isBlur:bool=false, _intensity:number="1.0")
	(scope
		(var panelElement:str = "_isBlur ? 'TP_ContrastPanelBlur' : 'TP_ContrastPanelNormal'")
	)
	(class $FullsizeAbsolute)
	(style
		(hitTest = false)
	)
	(controller $Instance
		(bind renderer "panelElement")
		(args "_intensity")
	)
)

(def element TP_ContrastPanelNormal(_alpha:number=1.0)
	(class $FullsizeAbsolute)
	(style
		(padding = -1px)
		(bind alpha "_alpha")
	)
	(block
		(class $FullsizeAbsolute)
		(style
			(backgroundImage = "'url:../service_kit/panel_backgrounds/hint_panel_high_contrast.png'")
			(scale9grid = 3)
		)
	)
	# (mc contrast_panel
	# 	(class $FullsizeAbsolute)
	# 	(bind alpha "_alpha")
	# )
)

(def element TP_ContrastPanelBlur(_blurIntensity:number=0.3)
	(class $FullsizeAbsolute)
	(mc mc_blurmap_medium
		(class $FullsizeAbsolute)
		(rendererString = blurMeBaby)
		(macro TP_BIND_BLURINTENSITY "_blurIntensity")
	)
)

# Active Consumables Info: wip
(def element TP_ShipConsumablesItem(_entity:gfx=null, _isAlly:bool=false, _userPrefsNum:gfx=null)
	(scope
		(macro TT_GET_PREF_BOOL _varName="'isTeamConsumableVisible'" _pref="TP_PREFS.TEAM_CONSUMABLES")

		(var _markerEntity:gfx = "_entity")
		(macro GET_MARKER_ENTITY_COMPONENT 'data')
		(var consData:array = "dataComponent ? dataComponent.data.consMonitor : []" (event "dataComponent.evChanged"))

		(macro GET_MARKER_ENTITY_COMPONENT 'vehicle')
		(var isShipVisible:bool = "vehicleComponent ? vehicleComponent : false")

		(macro GET_MARKER_ENTITY_COMPONENT 'health')
		(var isAlive:bool = "healthComponent ? healthComponent.isAlive : false" (event "healthComponent.evIsAliveChanged"))

		(var iconAlpha:number = "!isAlive ? 0 : isShipVisible ? 1 : 0.3")

		(var isEnabled:bool = "_isAlly && isTeamConsumableVisible")
	)
	(style
		(flow = "Flow.HORIZONTAL")
		(bind alpha "iconAlpha")
	)
	(bind visible "isEnabled")

	(controller $Repeat renderer='TP_SpecialConsumableRendererItem'
		(bind enabled "isEnabled && consData.length > 0")
		(bind count "consData.length")
		(args
			_consData = "consData[$index]"
		)
	)
)

(def element TP_SpecialConsumableRendererItem(_consData:dict)
	(scope
		(var isSpecial:bool = "_consData && 'isSpecial' in _consData && _consData.isSpecial")
	)
	(controller $Instance renderer='CM2_ConsumableItem'
		(bind enabled "isSpecial")
		(args _consData="_consData")
	)
)

(def element TP_HorizontalDividerTwoPx()
	(style
		(alpha = 2.0)
		(hitTest = false)
		(width = 100%)
	)
	(element HorizontalDividerTwoPx)
)

#--------------------------------------------------------------------------------
# TTXs
#--------------------------------------------------------------------------------
(def element TP_ShipConfigurationsItem(_entity:gfx=null, _isAlly:bool=false, _userPrefsNum:gfx=null)
	(scope
		(var avatarId:number = "_entity ? _entity.avatar.id : 0")

		#Classic TTX
		(var ttxCollection:gfx = "$datahub.getCollection(CC.mods_ShipParamsInBattle)")
		(var ttxEntity:gfx = "$datahub.getPrimaryEntity(CC.mods_ShipParamsInBattle, avatarId)" (event "ttxCollection.evAdded"))
		(var classicTTX:gfx = "ttxEntity ? ttxEntity.mods_ShipParamsInBattle.shipTTX : null")

		#New TTX
		(var shipBattleInfoCollection:gfx = "$datahub.getCollection(CC.shipBattleInfo)")
		(var shipBattleInfoEntity:gfx = "$datahub.getPrimaryEntity(CC.shipBattleInfo, avatarId)" (event "shipBattleInfoCollection.evAdded"))
		(var shipBattleInfo:gfx = "shipBattleInfoEntity ? shipBattleInfoEntity.shipBattleInfo : null" (event "shipBattleInfoEntity.shipBattleInfo.evChanged"))
		(var newTTX:gfx = "shipBattleInfo ? shipBattleInfo.shipTTX : null")

		(var isRealParams:bool = "shipBattleInfo ? shipBattleInfo.isRealParams : false")
		(var shipTTX:gfx = "isRealParams ? newTTX : classicTTX")

		(var camera:gfx = "$datahub.getSingleComponent(CC.camera)")
		(var altVision:bool = "camera ? camera.altVision : false" (event "camera.evAltVisionChanged"))
	)

	(hblock
		(style
			(align = "middle|center")
			(bind flow "_isAlly ? Flow.HORIZONTAL : Flow.REVERSE_HORIZONTAL")
			(height = "TP_PLAYER_ROW_SIZE.HEIGHT")
		)
		(controller $Repeat renderer='TP_ShipConfigRendererItem' count="TP_SHIPCONFIG_RENDERER_SETTINGS.length"
			(args
				_shipTTX	  = "shipTTX"
				_avatarEntity = "_entity"
				_isRealParams = "isRealParams"
				_userPrefsNum = "_userPrefsNum"
			)
		)
	)
)

(def element TP_ShipConfigRendererItem(_shipTTX:gfx, _avatarEntity:gfx, _isRealParams:bool, _userPrefsNum:gfx=null)
	(scope
		(var settings:dict = "TP_SHIPCONFIG_RENDERER_SETTINGS[$index]")

		(macro TT_GET_PREF_NUMBER _varName="'displayMode'" _pref="TP_PREFS[settings.prefSubKey].DISPLAY_MODE")
		(var isEnabled:bool = "displayMode != TP_DISPLAY_MODES.DISABLE")

		(var camera:gfx = "$datahub.getSingleComponent(CC.camera)")
		(var altVision:bool = "camera ? camera.altVision : false" (event "camera.evAltVisionChanged"))
		(macro TP_GET_DISPLAY_MODE _varName="'isVisible'" _prefValue="displayMode")

		(macro TT_GET_PREF_BOOL _varName="'isUnitVisible'" _pref="TP_PREFS.UNITS_VISIBLE")
	)

	(bind visible "isVisible")	

	(controller $Instance
		(bind renderer "settings.renderer")
		(bind enabled "isEnabled")
		(args
			_shipTTX	  = "_shipTTX"
			_avatarEntity = "_avatarEntity"
			_isRealParams = "_isRealParams"
			_userPrefsNum = "_userPrefsNum"
		)
		(exprs
			(style
				(bind width "isUnitVisible ? TP_SHIPCONFIG_ELEMENT_WIDTH.WITH_UNIT : TP_SHIPCONFIG_ELEMENT_WIDTH.NO_UNIT")
			)
		)
	)
)

# This will reduce unnecessary textfields
(def macro TP_SHIPCONFIG_TEXT_ITEM(_value:expression, _unit:expression, _isEnabled:expression)
	(block
		(style
			(width = 100%)
		)
		(controller $Instance renderer='TP_ShipConfigTextItem'
			(bind enabled "_isEnabled")
			(args
				_value="null == _value ? 0 : _value" # Without null check, the log will start crying about Invalid cast type
				_unit="_unit"
				_userPrefsNum="_userPrefsNum"
			)
		)
	)
)

(def element TP_ShipConfigArtilleryItem(_shipTTX:gfx, _userPrefsNum:gfx=null)
	(scope
		(var artilleryTTX:gfx = "_shipTTX ? _shipTTX.artillery : null")
		(var range:number = "artilleryTTX ? artilleryTTX.mgMaxDist.value : null")
		(var reload:number = "artilleryTTX ? artilleryTTX.mgReloadTime.value : null")
		(macro TT_GET_PREF_BOOL _varName="'isArtilleryRangeVisible'" _pref="TP_PREFS.ARTILLERY.RANGE")
		(macro TT_GET_PREF_BOOL _varName="'isArtilleryReloadVisible'" _pref="TP_PREFS.ARTILLERY.RELOAD")
	)

	(macro TP_SHIPCONFIG_TEXT_ITEM _value="range"	_unit="'km'"	_isEnabled="isArtilleryRangeVisible")
	(macro TP_SHIPCONFIG_TEXT_ITEM _value="reload"	_unit="'s'"		_isEnabled="isArtilleryReloadVisible")
)

(def element TP_ShipConfigTorpedoItem(_shipTTX:gfx, _userPrefsNum:gfx=null)
	(scope
		# Surface Torps
		(var torpedoesTTX:gfx = "_shipTTX ? _shipTTX.torpedoes : null")
		# Normal torps
		(var torpedoTTX:gfx = "torpedoesTTX ? torpedoesTTX.torpedo : null")
		(var torpedoRange:number = "torpedoTTX ? torpedoTTX.maxDist.value : null")
		# Deepwater torps
		(var torpedoDeepwaterTTX:gfx = "torpedoesTTX ? torpedoesTTX.torpedoDeepwater : null")
		(var torpedoDeepwaterRange:number = "torpedoDeepwaterTTX ? torpedoDeepwaterTTX.maxDist.value : null")
		# Alt torps
		(var torpedoAltTTX:gfx = "torpedoesTTX ? torpedoesTTX.torpedoAlt : null")
		(var torpedoAltRange:number = "torpedoAltTTX ? torpedoAltTTX.maxDist.value : null")

		# Submarine torps
		(var torpedoGroupsTTX:gfx = "_shipTTX ? _shipTTX.torpedoGroups : null")
		# Normal torps
		(var subTorpedoTTX:gfx = "torpedoGroupsTTX ? torpedoGroupsTTX.torpedo : null")
		(var subTorpedoRange:number = "subTorpedoTTX ? subTorpedoTTX.maxDist.value : null")
		# Deepwater torps
		(var subTorpedoDeepwaterTTX:gfx = "torpedoGroupsTTX ? torpedoGroupsTTX.torpedoDeepwater : null")
		(var subTorpedoDeepwaterRange:number = "subTorpedoDeepwaterTTX ? subTorpedoDeepwaterTTX.maxDist.value : null")
		# Alt torps
		(var subTorpedoAltTTX:gfx = "torpedoGroupsTTX ? torpedoGroupsTTX.torpedoAlt : null")
		(var subTorpedoAltRange:number = "subTorpedoAltTTX ? subTorpedoAltTTX.maxDist.value : null")
	)

	(macro TP_SHIPCONFIG_TEXT_ITEM _value="torpedoRange"			_unit="'km'"	_isEnabled="torpedoRange")
	(macro TP_SHIPCONFIG_TEXT_ITEM _value="torpedoDeepwaterRange"	_unit="'km'"	_isEnabled="torpedoDeepwaterRange")
	(macro TP_SHIPCONFIG_TEXT_ITEM _value="torpedoAltRange"			_unit="'km'"	_isEnabled="torpedoAltRange")

	(macro TP_SHIPCONFIG_TEXT_ITEM _value="subTorpedoRange"			_unit="'km'"	_isEnabled="subTorpedoRange")
	(macro TP_SHIPCONFIG_TEXT_ITEM _value="subTorpedoDeepwaterRange"_unit="'km'"	_isEnabled="subTorpedoDeepwaterRange")
	(macro TP_SHIPCONFIG_TEXT_ITEM _value="subTorpedoAltRange"		_unit="'km'"	_isEnabled="subTorpedoAltRange")
)

(def element TP_ShipConfigAtbaItem(_shipTTX:gfx, _avatarEntity:gfx, _isRealParams:bool, _userPrefsNum:gfx=null)
	(scope
		(var artilleryTTX:gfx = "_shipTTX ? _shipTTX.artillery : null")
		(var range:number = "artilleryTTX ? artilleryTTX.atbaMaxDist.value : null")
		
		#fix for skill---------------------
		(var selfPlayer:gfx = "$datahub.getSingleEntity(CC.playerAvatar)")
		(var avatarComponent:gfx = "_avatarEntity.avatar")

		#shipId -> ownShip (ship in port) -> crewId (crew on board) -> crewSkill (check crew has skill)
		(var isSelf:bool = "selfPlayer ? selfPlayer.avatar.id == avatarComponent.id : false")
		(var shipId:number = "avatarComponent ? avatarComponent.ship.ref.ship.id : null" (event "avatarComponent.evShipRefChanged"))
		(var shipType:str = "avatarComponent ? avatarComponent.shipType : null" (event "avatarComponent.evShipTypeChanged"))
		(var ownShipEntity:gfx = "$datahub.getPrimaryEntity(CC.ownShip, shipId)")

		(var skillId:number = "shipType in TP_ATBA_SKILL_ID ? TP_ATBA_SKILL_ID[shipType] : null")
		(var skillEntity:gfx = "$datahub.getPrimaryCompositeEntity(CC.skill, skillId, shipType, TP_ATBA_CREW_ID)")
		
		(var crewId:number = "ownShipEntity ? ownShipEntity.ownShip.crewId : null" (event "ownShipEntity.ownShip.evCrewChanged"))
		(var crewSkillEntity:gfx = "$datahub.getPrimaryCompositeEntity(CC.crewSkill, crewId, skillEntity.id)")
		#(crewId, skill) -> rutrns crewSkill if the crew is onboard and has skill

		(var isCorrectionNeeded:bool = "!(crewSkillEntity || isSelf || _isRealParams)")

		(var modifiers:dict = "skillEntity ? skillEntity.attributes.modifiers : null")
		(var rangeModifier:number = "isCorrectionNeeded && modifiers ? (1 + modifiers.GSMaxDist * 0.01) : 1.0") #value is negative and %
		#---------------------

		#fix------------------
		(var modifiedAtbaRange:number = "range * rangeModifier") #CAPTAIN SKILL FIX
		#---------------------
	)

	(macro TP_SHIPCONFIG_TEXT_ITEM _value="modifiedAtbaRange"		_unit="'km'"	_isEnabled="modifiedAtbaRange")
)

(def element TP_ShipConfigAirDefenseItem(_shipTTX:gfx, _userPrefsNum:gfx=null)
	(scope
		(var airDefenseTTX:gfx = "_shipTTX ? _shipTTX.airDefense : null")
		(var range:number = "airDefenseTTX ? airDefenseTTX.averageAura.maxDist.value : null")
		(var integralValue:number = "airDefenseTTX ? airDefenseTTX.integralValue.value : 0")
		(macro TT_GET_PREF_BOOL _varName="'isAntiAirRangeVisible'" _pref="TP_PREFS.ANTIAIR.RANGE")
		(macro TT_GET_PREF_BOOL _varName="'isAntiAirRatingVisible'" _pref="TP_PREFS.ANTIAIR.RATE")
	)

	(macro TP_SHIPCONFIG_TEXT_ITEM _value="range"			_unit="'km'"	_isEnabled="isAntiAirRangeVisible")
	(macro TP_SHIPCONFIG_TEXT_ITEM _value="integralValue"	_unit="'AA'"	_isEnabled="isAntiAirRatingVisible")
)

(def element TP_ShipConfigAirSupportItem(_shipTTX:gfx, _userPrefsNum:gfx=null)
	(scope
		(var airSupportTTX:gfx = "_shipTTX ? _shipTTX.airSupport : null")
		(var range:number = "airSupportTTX ? airSupportTTX.maxDist.value : null")
		(var reload:number = "airSupportTTX ? airSupportTTX.reloadTime.value : null")
		(macro TT_GET_PREF_BOOL _varName="'isAirSupportRangeVisible'" _pref="TP_PREFS.AIRSUPPORT.RANGE")
		(macro TT_GET_PREF_BOOL _varName="'isAirSupportReloadVisible'" _pref="TP_PREFS.AIRSUPPORT.RELOAD")
	)

	(macro TP_SHIPCONFIG_TEXT_ITEM _value="range"	_unit="'km'"	_isEnabled="isAirSupportRangeVisible")
	(macro TP_SHIPCONFIG_TEXT_ITEM _value="reload"	_unit="'s'"		_isEnabled="isAirSupportReloadVisible")
)

(def element TP_ShipConfigBatteryItem(_shipTTX:gfx)
	(scope
		(var batteryTTX:gfx = "_shipTTX.mods_ShipParamsInBattle.shipTTX.battery")
		(var capacity:number = "batteryTTX ? batteryTTX.capacity.value : null")
	)

	#(bind visible "batteryTTX")
	(style
		(bind alpha "batteryTTX ? 1.0 : 0.0")
		(width = "TP_SHIPCONFIG_ELEMENT_WIDTH.WITH_UNIT")
	)

	(style
		(align = "middle|center")
	)
	(block
		(element TP_ShipConfigTextItem _value="capacity" _unit="'s'" _userPrefsNum="_userPrefsNum")
	)
)

(def element TP_ShipConfigMobilityItem(_shipTTX:gfx, _userPrefsNum:gfx=null)
	(scope
		#surface speed
		(var mobilityTTX:gfx = "_shipTTX ? _shipTTX.mobility : null")
		(var surfaceSpeed:number = "mobilityTTX ? mobilityTTX.speed.value : null")

		#underwater speed
		(var underwaterMobilityTTX:gfx = "_shipTTX ? _shipTTX.underwaterMobility : null")
		(var underwaterSpeed:number = "underwaterMobilityTTX ? underwaterMobilityTTX.speed.value : null")

		(macro TT_GET_PREF_BOOL _varName="'isSurfaceMobilityVisible'" _pref="TP_PREFS.SPEED.SURFACE")
		(macro TT_GET_PREF_BOOL _varName="'isUnderwaterMobilityVisible'" _pref="TP_PREFS.SPEED.UNDERWATER")
	)

	(macro TP_SHIPCONFIG_TEXT_ITEM _value="surfaceSpeed"	_unit="'kts'"	_isEnabled="isSurfaceMobilityVisible")
	(macro TP_SHIPCONFIG_TEXT_ITEM _value="underwaterSpeed"	_unit="'kts'"	_isEnabled="isUnderwaterMobilityVisible && underwaterSpeed")
)

(def element TP_ShipConfigVisibilityItem(_shipTTX:gfx, _avatarEntity:gfx, _isRealParams:bool, _userPrefsNum:gfx=null)
	(scope
		#fix for skill---------------------
		(var selfPlayer:gfx = "$datahub.getSingleEntity(CC.playerAvatar)")
		(var avatarComponent:gfx = "_avatarEntity.avatar")

		#shipId -> ownShip (ship in port) -> crewId (crew on board) -> crewSkill (check crew has skill)
		(var isSelf:bool = "selfPlayer ? selfPlayer.avatar.id == avatarComponent.id : false")
		(var shipId:number = "avatarComponent ? avatarComponent.ship.ref.ship.id : null" (event "avatarComponent.evShipRefChanged"))
		(var shipType:str = "avatarComponent ? avatarComponent.shipType : null" (event "avatarComponent.evShipTypeChanged"))
		(var ownShipEntity:gfx = "$datahub.getPrimaryEntity(CC.ownShip, shipId)")

		(var skillId:number = "shipType in TP_CONCEALMENT_SKILL_ID ? TP_CONCEALMENT_SKILL_ID[shipType] : null")
		(var skillEntity:gfx = "$datahub.getPrimaryCompositeEntity(CC.skill, skillId, shipType, TP_CONCEALMENT_CREW_ID)")
		
		(var crewId:number = "ownShipEntity ? ownShipEntity.ownShip.crewId : null" (event "ownShipEntity.ownShip.evCrewChanged"))
		(var crewSkillEntity:gfx = "$datahub.getPrimaryCompositeEntity(CC.crewSkill, crewId, skillEntity.id)")
		#(crewId, skill) -> rutrns crewSkill if the crew is onboard and has skill

		(var isCorrectionNeeded:bool = "!(crewSkillEntity || isSelf || _isRealParams)")

		(var modifiers:dict = "skillEntity ? skillEntity.attributes.modifiers : null")
		(var visibilityModifier:number = "isCorrectionNeeded && modifiers ? (1 + modifiers.visibilityDistCoeff * 0.01) : 1.0") #value is negative and %
		#---------------------

		#ttx
		(var visibilityTTX:gfx = "_shipTTX ? _shipTTX.visibility : null")
		(var visibilityByShip:number = "visibilityTTX ? visibilityTTX.visibilityByShip.normal.value : null") #CAPTAIN SKILL FIX
		(var visibilityByPlane:number = "visibilityTTX ? visibilityTTX.visibilityByPlane.normal.value : null") #CAPTAIN SKILL FIX

		#fix------------------
		(var modifiedVisibilityByShip:number = "visibilityByShip * visibilityModifier") #CAPTAIN SKILL FIX
		(var modifiedVisibilityByPlane:number = "visibilityByPlane * visibilityModifier") #CAPTAIN SKILL FIX
		#---------------------

		(macro TT_GET_PREF_BOOL _varName="'isVisibilityByShipVisible'" _pref="TP_PREFS.VISIBILITY.SURFACE")
		(macro TT_GET_PREF_BOOL _varName="'isVisibilityByPlaneVisible'" _pref="TP_PREFS.VISIBILITY.AIR")
	)

	(macro TP_SHIPCONFIG_TEXT_ITEM _value="modifiedVisibilityByShip"	_unit="'km'"	_isEnabled="isVisibilityByShipVisible")
	(macro TP_SHIPCONFIG_TEXT_ITEM _value="modifiedVisibilityByPlane"	_unit="'km'"	_isEnabled="isVisibilityByPlaneVisible")
)

(def element TP_ShipConfigSurfaceConsumableItem(_shipTTX:gfx, _avatarEntity:gfx, _userPrefsNum:gfx=null)
	(scope
		(var avatarId:str = "_avatarEntity ? toString(_avatarEntity.avatar.id) : ''")
		(var consumableEntityWatcher:gfx = "$datahub.getPrimWatcher(CC.mods_DataComponent, TP_COMPONENT_KEY_CONSUMABLE_RANGES)")
		(var consumableEntity:gfx = "consumableEntityWatcher.entity" (event "consumableEntityWatcher.event"))
		(var consumableDataComponent:gfx = "consumableEntity ? consumableEntity.mods_DataComponent : null" (event "consumableEntity.evAdded"))
		(var consumableData:dict = "consumableDataComponent ? consumableDataComponent.data : {}" (event "consumableDataComponent.evDataChanged"))
		(var consumableRanges:dict = "avatarId in consumableData ? consumableData[avatarId] : {}")
		(var radarRange:number = "'rls' in consumableRanges ? consumableRanges.rls : null")
		(var hydroRange:number = "'sonar' in consumableRanges ? consumableRanges.sonar : null")

		(macro TT_GET_PREF_BOOL _varName="'isHydroRangeVisible'" _pref="TP_PREFS.SURFACE_CONSUMABLE.HYDRO_RANGE")
		(macro TT_GET_PREF_BOOL _varName="'isRadarRangeVisible'" _pref="TP_PREFS.SURFACE_CONSUMABLE.RADAR_RANGE")
	)

	(macro TP_SHIPCONFIG_TEXT_ITEM _value="hydroRange"	_unit="'km'"	_isEnabled="isHydroRangeVisible")
	(macro TP_SHIPCONFIG_TEXT_ITEM _value="radarRange"	_unit="'km'"	_isEnabled="isRadarRangeVisible")
)

(def element TP_ShipConfigSubmarineConsumableItem(_shipTTX:gfx, _avatarEntity:gfx, _userPrefsNum:gfx=null)
	(scope
		(var avatarId:str = "_avatarEntity ? toString(_avatarEntity.avatar.id) : ''")
		(var consumableEntityWatcher:gfx = "$datahub.getPrimWatcher(CC.mods_DataComponent, TP_COMPONENT_KEY_CONSUMABLE_RANGES)")
		(var consumableEntity:gfx = "consumableEntityWatcher.entity" (event "consumableEntityWatcher.event"))
		(var consumableDataComponent:gfx = "consumableEntity ? consumableEntity.mods_DataComponent : null" (event "consumableEntity.evAdded"))
		(var consumableData:dict = "consumableDataComponent ? consumableDataComponent.data : {}" (event "consumableDataComponent.evDataChanged"))
		(var consumableRanges:dict = "avatarId in consumableData ? consumableData[avatarId] : {}")
		(var radarRange:number = "'submarineLocator' in consumableRanges ? consumableRanges.submarineLocator : null")
		(var hydroRange:number = "'hydrophone' in consumableRanges ? consumableRanges.hydrophone : null")

		(macro TT_GET_PREF_BOOL _varName="'isSubHydroRangeVisible'" _pref="TP_PREFS.SUB_CONSUMABLE.SUB_HYDRO_RANGE")
		(macro TT_GET_PREF_BOOL _varName="'isSubRadarRangeVisible'" _pref="TP_PREFS.SUB_CONSUMABLE.SUB_RADAR_RANGE")
	)

	(macro TP_SHIPCONFIG_TEXT_ITEM _value="hydroRange"	_unit="'km'"	_isEnabled="isSubHydroRangeVisible")
	(macro TP_SHIPCONFIG_TEXT_ITEM _value="radarRange"	_unit="'km'"	_isEnabled="isSubRadarRangeVisible")
)

# Image Item
(def element TP_ShipConfigImageItem (_iconPath:str, _alpha:number="1.0", _tooltipTitle:str='', _tooltipTexts:array=[], _userPrefsNum:gfx=null)
	(scope
		(macro TT_GET_PREF_BOOL _varName="'isUnitVisible'" _pref="TP_PREFS.UNITS_VISIBLE")
	)
	(style
		(bind width "isUnitVisible ? TP_SHIPCONFIG_ELEMENT_WIDTH.WITH_UNIT : TP_SHIPCONFIG_ELEMENT_WIDTH.NO_UNIT")
		(align = "middle|center")
		(bind alpha "_alpha")
	)
	(block
		(style
			(height = 20)
			(width = 20)
			(bind backgroundImage "_iconPath")
			(backgroundSize = "fill")
		)
	)

	(controller $Tooltip layout=true
		(renderer='TP_ShipConfigTooltipHint')
		(args
			_tooltipTitle="_tooltipTitle"
			_tooltipTexts="_tooltipTexts"
		)
		(align="top|center")
		(position="border")
		(offset=[0, 10])
		(screenBoundsOffset={left:10, top:10, right:10, bottom:10})
		(macro SIMPLE_TOOLTIP_ANIMATION)
	)
)

(def element TP_ShipConfigTooltipHint(_tooltipTitle:str, _tooltipTexts:array=[]) layout=true
	(style (width = "200px") (hitTest = false))

	(macro TOOLTIP_SYSTEM_DEFAULT_BACKGROUND)

	(element TOOLTIP_SYSTEM_DEFAULT_CONTAINER
		(element TooltipSystemHeaderSubheaderText
			_headerText="_tooltipTitle"
		)

		(element TooltipSystemHorizontalDivider)

		(controller $Repeat #layout=true
			(renderer='TooltipSystemStatusLine')
			(bind count "_tooltipTexts.length")
			(args
				_text="_tooltipTexts[$index]"
			)
			(exprs
				(style
					(bind marginTop "$index == 0 ? 0 : 5px")
				)
			)
		)
	)
)

# Text Item
(def element TP_ShipConfigTextItem (_value:number, _unit:str='', _roundDigit:number="1.0", _userPrefsNum:gfx=null)
	(scope
		(var isValueVisible:bool = "_value")
		(macro TT_GET_PREF_BOOL _varName="'isUnitVisible'" _pref="TP_PREFS.UNITS_VISIBLE")
		(macro TT_GET_PREF_BOOL _varName="'isBoldFont'"    _pref="TP_PREFS.STATS_BOLD_FONT")
	)

	(style
		(width = 100%)
		(align = "right")
		(bind alpha "isValueVisible ? 1 : 0")
		(flow = "Flow.HORIZONTAL")
		(marginTop = 1px)
		(marginBottom = 2px)
	)
	(tf
		(bind class "isBoldFont ? '$TP_ShipConfigTextBold' : '$TP_ShipConfigText'")
		(style
			(bind marginRight "isUnitVisible ? XS : S")
			(textAlign = "right")
			(width = 100%)
			# Without width and textAlign there is one fucking pixel misalignment on some texts
			# This is cursed
		)
		(bind text "formatFloatingPoint(_value, _roundDigit)")
	)
	(tf
		(bind visible "isUnitVisible")
		(class $TP_ShipConfigText)
		(bind text "_unit")
		(alpha = "TC")
		(style
			(width = "20px")
			(marginRight = "XS")
		)
	)
)

#--------------------------------------------------------------------------------
# Tooltip Items
#--------------------------------------------------------------------------------
(def constant TP_TOOLTIP_SHIPCONFIG_RENDERER_SETTINGS [
	{renderer: 'TP_TooltipMainGunItem',				ttxName: 'artillery',			title: 'IDS_SHIP_PARAM_ARTILLERY', 		ttxSubAttr: 'mainGun'},
	{renderer: 'TP_TooltipAtbaItem',				ttxName: 'artillery',			title: 'IDS_SHIP_PARAM_ARTILLERY_ATBA',	ttxSubAttr: 'atba'},
	{renderer: 'TP_TooltipTorpedoesItem',			ttxName: 'torpedoes',			title: 'IDS_SHIP_PARAM_TORPEDOES'},
	{renderer: 'TP_TooltipTorpedoesGroupItem',		ttxName: 'torpedoGroups',		title: 'IDS_SHIP_PARAM_TORPEDOES'},
	{renderer: 'TP_TooltipAirDefenseItem',			ttxName: 'airDefense',			title: 'IDS_SHIP_PARAM_AIR_DEFENSE'},
	{renderer: 'TP_TooltipAirSupportItem',			ttxName: 'airSupport',			title: 'IDS_SHIP_PARAM_AIR_SUPPORT'},
	{renderer: 'TP_TooltipDepthChargeItem',			ttxName: 'depthCharges',		title: 'IDS_SHIP_PARAM_DEPTH_CHARGE'},
	{renderer: 'TP_TooltipSurfaceMobilityItem',		ttxName: 'mobility',			title: 'IDS_SHIP_PARAM_MOBILITY'},
	{renderer: 'TP_TooltipUnderwaterMobilityItem',	ttxName: 'underwaterMobility',	title: 'IDS_SHIP_PARAM_UNDERWATER_MOBILITY'},
	{renderer: 'TP_TooltipVisibilityItem',			ttxName: 'visibility',			title: 'IDS_SHIP_PARAM_DETECTION'},
])

(def constant TP_TOOLTIP_INDENTS {
	HEADER: 0,
	SUB_HEADER: 10px,
	TEXT: 5px,
	SUB_TEXT: 15px,
})

(def css $TP_FullWidth()
	(width = 100%)
)

(def css $TP_TooltipSectionMargin()
	(marginBottom = 5px)
)

(def element TP_TooltipShipConfigurationsItem(_entity:gfx=null, _userPrefsNum:gfx=null)
	(scope
		(var avatarId:number = "_entity ? _entity.avatar.id : 0")
		(var isSelf:bool = "_entity ? _entity.hasComponent(CC.playerAvatar) : false" (event "_entity.evAdded")(event "_entity.evRemoved"))

		(macro IS_SPECTATOR_MODE)

		#Classic TTX
		(var ttxCollection:gfx = "$datahub.getCollection(CC.mods_ShipParamsInBattle)")
		(var ttxEntity:gfx = "$datahub.getPrimaryEntity(CC.mods_ShipParamsInBattle, avatarId)" (event "ttxCollection.evAdded"))

		#New TTX
		(var shipBattleInfoCollection:gfx = "$datahub.getCollection(CC.shipBattleInfo)")
		(var shipBattleInfoEntity:gfx = "$datahub.getPrimaryEntity(CC.shipBattleInfo, avatarId)" (event "shipBattleInfoCollection.evAdded"))
		(var shipBattleInfo:gfx = "shipBattleInfoEntity ? shipBattleInfoEntity.shipBattleInfo : null" (event "shipBattleInfoEntity.shipBattleInfo.evChanged"))

		(var isRealParams:bool = "shipBattleInfo ? shipBattleInfo.isRealParams : false")
		(var shipTTX:gfx = "isRealParams ? shipBattleInfo.shipTTX : ttxEntity.mods_ShipParamsInBattle.shipTTX")

		(macro TT_GET_PREF_BOOL _varName="'isOwnBuildOnly'"		_pref="TP_PREFS.HIDE_BUILD")
		(var isBuildVisible:bool = "TT_BUILDVIEWER_INSTALLED && (isSpectatorTrainingMode || (!isOwnBuildOnly || isSelf))")

		(macro TT_GET_PREF_BOOL _varName="'isOwnDamageOnly'"	_pref="TP_PREFS.HIDE_DAMAGE")
		(var isDamageVisible:bool = "TT_DAMAGEMONITOR_INSTALLED && (isSpectatorTrainingMode || (!isOwnDamageOnly || isSelf))")
	)

	(style
		(align = "middle|center")
		(hitTest = false)
		(flow = "Flow.HORIZONTAL")
	)

	(macro TOOLTIP_SYSTEM_DEFAULT_BACKGROUND)

	(element TOOLTIP_SYSTEM_DEFAULT_CONTAINER $enabled="!isSpectatorTrainingMode"
		(style
			(width = 300px)
		)
		(controller $Repeat renderer='TP_TooltipShipConfigRendererItem'
			(bind count "TP_TOOLTIP_SHIPCONFIG_RENDERER_SETTINGS.length")
			(args
				_shipTTX		= "shipTTX"
				_avatarEntity	= "_entity"
				_isRealParams	= "isRealParams"
				_userPrefsNum	= "_userPrefsNum"
			)
		)
		(element TP_TooltipConsumableItem _shipBattleInfo = "shipBattleInfo")
	)
	(block
		(style
			(align = "middle|center")
		)
		(controller $Instance renderer='TP_BuildViewerItem'
			(bind enabled "isBuildVisible")
			(args
				_entity			= "_entity"
				_userPrefsNum	= "_userPrefsNum"
			)
		)
		(controller $Instance renderer='TP_DamageMonitorItem'
			(bind enabled "isDamageVisible")
			(args _entity = "_entity")
		)
	)
)

(def element TP_BuildViewerItem(_entity:gfx, _userPrefsNum:gfx=null)
	(scope
		(var vehicleId:str = "_entity && _entity.hasComponent(CC.vehicleInfo) ? toString(_entity.vehicleInfo.id) : ''" (event "_entity.evAdded"))
	)
	(style
		(align = "middle|center")
	)
	(element BV_BuildPanelElement _vehicleId="vehicleId")
)

(def element TP_DamageMonitorItem(_entity:gfx)
	(scope
		(var avatarId:str = "_entity ? _entity.avatar.id : ''")
	)
	(style
		(align = "middle|center")
	)
	(element DMonitor_DamagePanelElement _targetAvatarId="avatarId")
)

(def element TP_TooltipShipConfigRendererItem(_shipTTX:gfx, _avatarEntity:gfx, _isRealParams:bool, _userPrefsNum:gfx=null)
	(scope
		(var settings:dict = "TP_TOOLTIP_SHIPCONFIG_RENDERER_SETTINGS[$index]")
		(var subAttr:str = "'ttxSubAttr' in settings ? settings.ttxSubAttr : null")
		(var isTTXAvailable:bool = "null != _shipTTX[settings.ttxName] && (subAttr ? _shipTTX[settings.ttxName][subAttr].length : true)")
	)
	(class $TP_FullWidth)

	(bind visible "isTTXAvailable")
	(style
		(marginBottom = 5px)
	)

	(controller $Instance
		(renderer = 'TP_TooltipShipConfigTitleItem')
		(bind enabled "isTTXAvailable")
		(args
			_title			= "settings.title"
			_userPrefsNum 	= "_userPrefsNum"
		)
	)
	(controller $Instance
		(bind renderer "settings.renderer")
		(bind enabled "isTTXAvailable")
		(args
			_shipTTX	  	= "_shipTTX"
			_avatarEntity 	= "_avatarEntity"
			_isRealParams 	= "_isRealParams"
			_userPrefsNum 	= "_userPrefsNum"
		)
	)
)

(def element TP_TooltipMainGunItem(_shipTTX:gfx, _userPrefsNum:gfx=null)
	(scope
		(var artilleryTTX:gfx = "_shipTTX.artillery")
		(var mainGunTTX:array = "artilleryTTX ? artilleryTTX.mainGun : null")
		(var hasMainGun:bool = "mainGunTTX.length > 0")
		(var range:number = "artilleryTTX ? artilleryTTX.mgMaxDist.value : null")
		(var reload:number = "artilleryTTX ? artilleryTTX.mgReloadTime.value : null")

		# ~~Awful code~~ Maybe not so bad after all.
		# Repeat didn't work out well but its good enough until a ship with 5 different guns appears.
		(var numBarrels1:number = "hasMainGun ? mainGunTTX[0].numBarrels.value * mainGunTTX[0].numGuns.value : 0")
		(var numBarrels2:number = "mainGunTTX.length > 1 ? mainGunTTX[1].numBarrels.value * mainGunTTX[1].numGuns.value : 0")
		(var numBarrels3:number = "mainGunTTX.length > 2 ? mainGunTTX[2].numBarrels.value * mainGunTTX[2].numGuns.value : 0")
		(var numBarrels4:number = "mainGunTTX.length > 3 ? mainGunTTX[3].numBarrels.value * mainGunTTX[3].numGuns.value : 0")
		(var totalBarrelsCount:number = "numBarrels1 + numBarrels2 + numBarrels3 + numBarrels4")
		(var shellsPerMin:number = "totalBarrelsCount * (60 / reload) * 0.33")

		(var altFire:gfx = "artilleryTTX ? artilleryTTX.altFireMode : null")
		(var altFireShots:number = "altFire ? altFire.numShots.value : null")
		(var altFireReload:number = "altFire ? altFire.reloadTime.value : null")

		(var ammoHE:gfx = "artilleryTTX ? artilleryTTX.ammoHE : null")
		(var ammoCS:gfx = "artilleryTTX ? artilleryTTX.ammoCS : null")
		(var ammoAP:gfx = "artilleryTTX ? artilleryTTX.ammoAP : null")

		(var pircingHE:number = "ammoHE ? ammoHE.piercing.value : null")
		(var pircingCS:number = "ammoCS ? ammoCS.piercing.value : null")
		(var pircingAP:number = "ammoAP ? ammoAP.piercing.value * 0.001 : null")

		(var damageHE:number = "ammoHE ? ammoHE.damage.value : 0")
		(var damageCS:number = "ammoCS ? ammoCS.damage.value : 0")
		(var damageAP:number = "ammoAP ? ammoAP.damage.value : 0")

		(var damagePerMinHE:number = "damageHE * shellsPerMin")
		(var damagePerMinCS:number = "damageCS * shellsPerMin")
		(var damagePerMinAP:number = "damageAP * shellsPerMin")

		(var caliber:number = "hasMainGun ? mainGunTTX[0].caliber.value : 0")
		(var overmatch:number = "hasMainGun ? floor(caliber / 14.3) : 0")

		(macro TT_GET_LANGUAGE_INDEX)
		(macro TT_GET_TRANSLATION _varName="'overmatchTranslation'" _key="'IDS_TT_OVERMATCH'")
	)

	(class $TP_FullWidth)

	(block
		(class $TP_FullWidth)
		(class $TP_TooltipSectionMargin)
		(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_MAX_DIST'" _value="range" _unit="'km'" _userPrefsNum="_userPrefsNum")
		(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_SHOT_DELAY'" _value="reload" _unit="'s'" _userPrefsNum="_userPrefsNum")
	)

	(block
		(class $TP_FullWidth)
		(class $TP_TooltipSectionMargin)
		(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_ARTILLERY_CALIBER'" _value="caliber" _roundDigit=0 _unit="'mm'" _userPrefsNum="_userPrefsNum")
		(element TP_TooltipShipConfigTextItem _title="overmatchTranslation" _value="overmatch" _roundDigit=0 _unit="'mm'" _userPrefsNum="_userPrefsNum")
	)

	(block
		(bind visible "altFire")
		(class $TP_FullWidth)
		(class $TP_TooltipSectionMargin)
		(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_BURST_FIRE_SALVO_COUNT'" _value="altFireShots" _roundDigit=0 _unit=null _userPrefsNum="_userPrefsNum")
		(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_BURST_FIRE_RELOAD_TIME'" _value="altFireReload" _unit="'s'" _userPrefsNum="_userPrefsNum")
	)

	(block
		(class $TP_FullWidth)
		(class $TP_TooltipSectionMargin)
		(element TP_TooltipShipConfigTextItem _title="'HE DPM'" _value="damagePerMinHE" _roundDigit=0 _unit=null _userPrefsNum="_userPrefsNum")
		(element TP_TooltipShipConfigTextItem _title="'SAP DPM'" _value="damagePerMinCS" _roundDigit=0 _unit=null _userPrefsNum="_userPrefsNum")
		(element TP_TooltipShipConfigTextItem _title="'AP DPM'" _value="damagePerMinAP" _roundDigit=0 _unit=null _userPrefsNum="_userPrefsNum")
	)

	(block
		(class $TP_FullWidth)
		(class $TP_TooltipSectionMargin)
		(element TP_TooltipShipConfigTextItem _title="'HE Penetration'" _value="pircingHE" _unit="'mm'" _roundDigit=0 _userPrefsNum="_userPrefsNum")
		(element TP_TooltipShipConfigTextItem _title="'SAP Penetration'" _value="pircingCS" _unit="'mm'" _roundDigit=0 _userPrefsNum="_userPrefsNum")
		(element TP_TooltipShipConfigTextItem _title="'AP Penetration'" _value="pircingAP" _unit="'mm'" _roundDigit=0 _userPrefsNum="_userPrefsNum")
	)
)

(def element TP_TooltipAtbaItem(_shipTTX:gfx, _avatarEntity:gfx, _isRealParams:bool, _userPrefsNum:gfx=null)
	(scope
		(var artilleryTTX:gfx = "_shipTTX.artillery")
		(var range:number = "artilleryTTX ? artilleryTTX.atbaMaxDist.value : null")

		# Fix for skill---------------------
		(var selfPlayer:gfx = "$datahub.getSingleEntity(CC.playerAvatar)")
		(var avatarComponent:gfx = "_avatarEntity.avatar")

		# shipId -> ownShip (ship in port) -> crewId (crew on board) -> crewSkill (check crew has skill)
		(var isSelf:bool = "selfPlayer ? selfPlayer.avatar.id == avatarComponent.id : false")
		(var shipId:number = "avatarComponent ? avatarComponent.ship.ref.ship.id : null" (event "avatarComponent.evShipRefChanged"))
		(var shipType:str = "avatarComponent ? avatarComponent.shipType : null" (event "avatarComponent.evShipTypeChanged"))
		(var ownShipEntity:gfx = "$datahub.getPrimaryEntity(CC.ownShip, shipId)")

		(var skillId:number = "shipType in TP_ATBA_SKILL_ID ? TP_ATBA_SKILL_ID[shipType] : null")
		(var skillEntity:gfx = "$datahub.getPrimaryCompositeEntity(CC.skill, skillId, shipType, TP_ATBA_CREW_ID)")
		
		(var crewId:number = "ownShipEntity ? ownShipEntity.ownShip.crewId : null" (event "ownShipEntity.ownShip.evCrewChanged"))
		(var crewSkillEntity:gfx = "$datahub.getPrimaryCompositeEntity(CC.crewSkill, crewId, skillEntity.id)")
		# (crewId, skill) -> rutrns crewSkill if the crew is onboard and has skill

		(var isCorrectionNeeded:bool = "!(crewSkillEntity || isSelf || _isRealParams)")

		(var modifiers:dict = "skillEntity ? skillEntity.attributes.modifiers : null")
		(var rangeModifier:number = "isCorrectionNeeded && modifiers ? (1 + modifiers.GSMaxDist * 0.01) : 1.0") #value is negative and %
		#---------------------

		# Fix-----------------
		(var modifiedAtbaRange:number = "range * rangeModifier") #CAPTAIN SKILL FIX
		#---------------------
	)

	(class $TP_FullWidth)

	(block
		(class $TP_FullWidth)
		(class $TP_TooltipSectionMargin)
		(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_MAX_DIST'" _value="modifiedAtbaRange" _unit="'km'" _userPrefsNum="_userPrefsNum")
	)
)

(def element TP_TooltipTorpedoesItem(_shipTTX:gfx, _userPrefsNum:gfx=null)
	(scope
		# Surface Torps
		(var torpedoesTTX:gfx = "_shipTTX.torpedoes")
		# Normal Torps
		(var torpedoTTX:gfx = "torpedoesTTX ? torpedoesTTX.torpedo : null")
		# Deepwater Torps
		(var torpedoDeepwaterTTX:gfx = "torpedoesTTX ? torpedoesTTX.torpedoDeepwater : null")
		# Alt Torps
		(var torpedoAltTTX:gfx = "torpedoesTTX ? torpedoesTTX.torpedoAlt : null")
		# Reload
		(var reload:number = "torpedoesTTX ? torpedoesTTX.reloadTime.value : null")
	)

	(class $TP_FullWidth)
	
	(block
		(class $TP_FullWidth)
		(class $TP_TooltipSectionMargin)
		(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_SHOT_DELAY'" _value="reload" _unit="'s'" _userPrefsNum="_userPrefsNum")
	)

	(controller $Instance renderer='TP_TooltipTorpedoAmmoItem'
		(bind enabled "torpedoTTX")
		(args
			_title			= 'IDS_SHIP_PARAM_TORPEDO_AMMO'
			_torpedoAmmoTTX = "torpedoTTX"
			_userPrefsNum	= "_userPrefsNum"
		)
	)

	(controller $Instance renderer='TP_TooltipTorpedoAmmoItem'
		(bind enabled "torpedoDeepwaterTTX")
		(args
			_title			= 'IDS_SHIP_PARAM_TORPEDO_DEEPWATER_AMMO'
			_torpedoAmmoTTX = "torpedoDeepwaterTTX"
			_userPrefsNum	= "_userPrefsNum"
		)
	)

	(controller $Instance renderer='TP_TooltipTorpedoAmmoItem'
		(bind enabled "torpedoAltTTX")
		(args
			_title			= 'IDS_SHIP_PARAM_TORPEDO_ALTERNATIVE_AMMO'
			_torpedoAmmoTTX = "torpedoAltTTX"
			_userPrefsNum	= "_userPrefsNum"
		)
	)
)

(def element TP_TooltipTorpedoAmmoItem(_title:str, _torpedoAmmoTTX:gfx, _userPrefsNum:gfx=null)
	(scope
		(var torpedoTTX:gfx = "_torpedoAmmoTTX ? _torpedoAmmoTTX.torpedo : null")
		(var range:number = "_torpedoAmmoTTX ? _torpedoAmmoTTX.maxDist.value : 0")
		(var damage:number = "_torpedoAmmoTTX ? _torpedoAmmoTTX.damage.value : 0")
		(var canHitClasses:array = "_torpedoAmmoTTX && _torpedoAmmoTTX.canHitClasses ? _torpedoAmmoTTX.canHitClasses : null")
	)

	(class $TP_FullWidth)
	(class $TP_TooltipSectionMargin)

	(element TP_TooltipShipConfigTitleItem _title="_title" _indent="TP_TOOLTIP_INDENTS.SUB_HEADER")

	(block
		(class $TP_FullWidth)
		(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_MAX_DIST'" _value="range" _unit="'km'" _indent="TP_TOOLTIP_INDENTS.SUB_TEXT" _userPrefsNum="_userPrefsNum")
		(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_DAMAGE'" _value="damage" _roundDigit=0 _indent="TP_TOOLTIP_INDENTS.SUB_TEXT" _userPrefsNum="_userPrefsNum")
		(controller $Instance renderer='TP_TooltipShipConfigClassIconsItem'
			(bind enabled "canHitClasses && canHitClasses.length > 0")
			(args _title="'IDS_SHIP_PARAM_TORPEDOES_AFFECTED_SHIPS'" _canHitClasses="canHitClasses" _indent="TP_TOOLTIP_INDENTS.SUB_TEXT" _userPrefsNum="_userPrefsNum")
		)
	)
)

(def element TP_TooltipTorpedoesGroupItem(_shipTTX:gfx, _userPrefsNum:gfx=null)
	(scope
		# Submarine Torps
		(var torpedoGroupsTTX:gfx = "_shipTTX.torpedoGroups")
		# Normal Torps
		(var subTorpedoTTX:gfx = "torpedoGroupsTTX ? torpedoGroupsTTX.torpedo : null")
		# Deepwater Torps
		(var subTorpedoDeepwaterTTX:gfx = "torpedoGroupsTTX ? torpedoGroupsTTX.torpedoDeepwater : null")
		# Alt Torps
		(var subTorpedoAltTTX:gfx = "torpedoGroupsTTX ? torpedoGroupsTTX.torpedoAlt : null")
		# Forward Reload
		(var torpdoBowReload:number = "(torpedoGroupsTTX && torpedoGroupsTTX.bowGroup) ? torpedoGroupsTTX.bowGroup.reloadTime.value : null")
		(var torpdoBowLoaders:number = "(torpedoGroupsTTX && torpedoGroupsTTX.bowGroup) ? torpedoGroupsTTX.bowGroup.numLoaders.value : null")
		# Stern Reload
		(var torpdoSternReload:number = "(torpedoGroupsTTX && torpedoGroupsTTX.sternGroup) ? torpedoGroupsTTX.sternGroup.reloadTime.value : null")
		(var torpdoSternLoaders:number = "(torpedoGroupsTTX && torpedoGroupsTTX.sternGroup) ? torpedoGroupsTTX.sternGroup.numLoaders.value : null")
	)

	(class $TP_FullWidth)

	(block
		(class $TP_FullWidth)
		(class $TP_TooltipSectionMargin)
		(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_SHOT_DELAY'" _value="torpdoBowReload" _unit="'s'" _userPrefsNum="_userPrefsNum")
	)

	(controller $Instance renderer='TP_TooltipTorpedoAmmoItem'
		(bind enabled "subTorpedoTTX")
		(args
			_title			= 'IDS_SHIP_PARAM_TORPEDO_AMMO'
			_torpedoAmmoTTX = "subTorpedoTTX"
			_userPrefsNum	= "_userPrefsNum"
		)
	)

	(controller $Instance renderer='TP_TooltipTorpedoAmmoItem'
		(bind enabled "subTorpedoDeepwaterTTX")
		(args
			_title			= 'IDS_SHIP_PARAM_TORPEDO_DEEPWATER_AMMO'
			_torpedoAmmoTTX = "subTorpedoDeepwaterTTX"
			_userPrefsNum	= "_userPrefsNum"
		)
	)

	(controller $Instance renderer='TP_TooltipTorpedoAmmoItem'
		(bind enabled "subTorpedoAltTTX")
		(args
			_title			= 'IDS_SHIP_PARAM_TORPEDO_ALTERNATIVE_AMMO'
			_torpedoAmmoTTX = "subTorpedoAltTTX"
			_userPrefsNum	= "_userPrefsNum"
		)
	)
)

(def element TP_TooltipAirDefenseItem(_shipTTX:gfx, _userPrefsNum:gfx=null)
	(scope
		(var airDefenseTTX:gfx = "_shipTTX.airDefense")

		(var integralValue:number = "airDefenseTTX ? airDefenseTTX.integralValue.value : 0")
		(var maxRange:number = "airDefenseTTX ? airDefenseTTX.averageAura.maxDist.value : null")
		(var bubble:number = "(airDefenseTTX && airDefenseTTX.bubble)  ? airDefenseTTX.bubble.numBubbles.value : null")

		(var auras:array = "airDefenseTTX ? airDefenseTTX.auras : []")
	)

	(class $TP_FullWidth)

	(block
		(class $TP_FullWidth)
		(class $TP_TooltipSectionMargin)
		(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_AIR_DEFENSE'" _value="integralValue" _roundDigit=0 _userPrefsNum="_userPrefsNum")
		(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_MAX_DIST'" _value="maxRange" _unit="'km'" _userPrefsNum="_userPrefsNum")
		(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_AA_EXPL_COUNT'" _value="bubble" _roundDigit=0 _userPrefsNum="_userPrefsNum")
	)

	(reverse
		(class $TP_FullWidth)
		(class $TP_TooltipSectionMargin)
		(controller $Repeat renderer='TP_TooltipShipConfigTextItem'
			(bind enabled "auras.length > 0")
			(bind count "auras.length")
			(args _title="'IDS_SHIP_PARAM_AA_AVERAGE_DAMAGE_' + toUpper(auras[$index].type)" _value="auras[$index].damage.value" _roundDigit=0 _userPrefsNum="_userPrefsNum")
		)
	)
)

(def element TP_TooltipAirSupportItem(_shipTTX:gfx, _userPrefsNum:gfx=null)
	(scope
		# AirSupport
		(var airSupportTTX:gfx = "_shipTTX.airSupport")
		(var range:number = "airSupportTTX ? airSupportTTX.maxDist.value : null")
		(var reload:number = "airSupportTTX ? airSupportTTX.reloadTime.value : null")
		
		(var bomberHE:gfx = "airSupportTTX ? airSupportTTX.bomberHE : null")
		(var bomberAP:gfx = "airSupportTTX ? airSupportTTX.bomberAP : null")
		(var bomberDC:gfx = "airSupportTTX ? airSupportTTX.bomberDC : null")

		(var planesHE:number = "bomberHE ? bomberHE.chargesNum.value : 0")
		(var planesAP:number = "bomberAP ? bomberAP.chargesNum.value : 0")
		(var planesDC:number = "bomberDC ? bomberDC.chargesNum.value : 0")
		(var numSquadrons:number = "max(planesHE, planesAP, planesDC)")

		(var bombHE:gfx = "bomberHE ? bomberHE.bombHE : null")
		(var bombAP:gfx = "bomberAP ? bomberAP.bombAP : null")
		(var bombDC:gfx = "bomberDC ? bomberDC.bombDC : null")

		(var damageHE:number = "bombHE ? bombHE.damage.value : null")
		(var damageAP:number = "bombAP ? bombAP.damage.value : null")
		(var damageDC:number = "bombDC ? bombDC.damage.value : null")

		(var numBombsHE:number = "bombHE ? bombHE.numBombs.value : null")
		(var numBombsAP:number = "bombAP ? bombAP.numBombs.value : null")
		(var numBombsDC:number = "bombDC ? bombDC.numBombs.value : null")

		(var piercingHE:number = "bombHE ? bombHE.piercing.value : null")
		(var burnHE:number = "bombHE ? bombHE.burnChance.value * 100 : null")
		(var burnDC:number = "bombDC ? bombDC.burnChance.value * 100 : null")
	)

	(class $TP_FullWidth)

	(block
		(class $TP_FullWidth)
		(class $TP_TooltipSectionMargin)
		(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_MAX_DIST'" _value="range" _unit="'km'" _userPrefsNum="_userPrefsNum")
		(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_SHOT_DELAY'" _value="reload" _unit="'s'" _userPrefsNum="_userPrefsNum")
		(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_AIR_SUPPORT_NUM_SQUADRONS'" _value="numSquadrons" _roundDigit=0 _unit=null _userPrefsNum="_userPrefsNum")
	)

	(block
		(class $TP_FullWidth)
		(bind visible "bomberHE")

		(element TP_TooltipShipConfigTitleItem _title="'IDS_SHIP_PARAM_AIR_SUPPORT_SQUADRONS_HE'" _indent="TP_TOOLTIP_INDENTS.SUB_HEADER")
		(block
			(class $TP_FullWidth)
			(class $TP_TooltipSectionMargin)
			(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_DAMAGE'" _value="damageHE" _unit=null _roundDigit=0 _indent="TP_TOOLTIP_INDENTS.SUB_TEXT" _userPrefsNum="_userPrefsNum")
			(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_AIR_SUPPORT_BOMB_PIERCING_HE'" _value="piercingHE" _roundDigit=0 _unit="'mm'" _indent="TP_TOOLTIP_INDENTS.SUB_TEXT" _userPrefsNum="_userPrefsNum")
			(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_AIR_SUPPORT_BOMB_BURN_PROB_HE'" _value="burnHE" _roundDigit=1 _unit="'%'" _indent="TP_TOOLTIP_INDENTS.SUB_TEXT" _userPrefsNum="_userPrefsNum")
		)
	)

	(block
		(class $TP_FullWidth)
		(bind visible "bomberDC")

		(element TP_TooltipShipConfigTitleItem _title="'IDS_SHIP_PARAM_AIR_SUPPORT_SQUADRONS_DEPTHCHARGE'" _indent="TP_TOOLTIP_INDENTS.SUB_HEADER")
		(block
			(class $TP_FullWidth)
			(class $TP_TooltipSectionMargin)
			(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_DAMAGE'" _value="damageDC" _unit=null _roundDigit=0 _indent="TP_TOOLTIP_INDENTS.SUB_TEXT" _userPrefsNum="_userPrefsNum")
			(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_AIR_SUPPORT_BOMB_BURN_PROB_HE'" _value="burnDC" _roundDigit=1 _unit="'%'" _indent="TP_TOOLTIP_INDENTS.SUB_TEXT" _userPrefsNum="_userPrefsNum")
		)
	)
)

(def element TP_TooltipDepthChargeItem(_shipTTX:gfx, _userPrefsNum:gfx=null)
	(scope
		#AirSupport
		(var depthChargesTTX:gfx = "_shipTTX.depthCharges")
		(var numCharges:number = "depthChargesTTX ? depthChargesTTX.numCharges.value : null")
		(var numBombs:number = "depthChargesTTX ? depthChargesTTX.numBombs.value : null")
		(var reload:number = "depthChargesTTX ? depthChargesTTX.reloadTime.value : null")
		(var damage:number = "depthChargesTTX ? depthChargesTTX.damage.value : null")
	)

	(class $TP_FullWidth)

	(block
		(class $TP_FullWidth)
		(class $TP_TooltipSectionMargin)

		(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_SHOT_DELAY'" _value="reload" _unit="'s'" _userPrefsNum="_userPrefsNum")
		(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_DAMAGE'" _value="damage" _unit=null _roundDigit=0 _userPrefsNum="_userPrefsNum")
		(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_DEPTH_CHARGE_MAX_PACKS'" _value="numCharges" _roundDigit=0 _unit=null _userPrefsNum="_userPrefsNum")
		(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_DEPTH_CHARGE_NUM_BOMBS_IN_PACK'" _value="numBombs" _roundDigit=0 _unit=null _userPrefsNum="_userPrefsNum")
	)
)

(def element TP_TooltipSurfaceMobilityItem(_shipTTX:gfx, _userPrefsNum:gfx=null)
	(scope
		# Surface Speed
		(var mobilityTTX:gfx = "_shipTTX.mobility")
		(var surfaceSpeed:number = "mobilityTTX ? mobilityTTX.speed.value : null")
	)

	(class $TP_FullWidth)

	(block
		(class $TP_FullWidth)
		(class $TP_TooltipSectionMargin)
		(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_MAXSPEED'" _value="surfaceSpeed" _unit="'kts'" _userPrefsNum="_userPrefsNum")			
	)
)

(def element TP_TooltipUnderwaterMobilityItem(_shipTTX:gfx, _userPrefsNum:gfx=null)
	(scope
		# Underwater Speed
		(var underwaterMobilityTTX:gfx = "_shipTTX.underwaterMobility")
		(var underwaterSpeed:number = "underwaterMobilityTTX ? underwaterMobilityTTX.speed.value : null")
	)

	(class $TP_FullWidth)

	(block
		(class $TP_FullWidth)
		(class $TP_TooltipSectionMargin)
		(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_MAX_SPEED_UNDER_WATER'" _value="underwaterSpeed" _unit="'kts'" _userPrefsNum="_userPrefsNum")
	)
)

(def element TP_TooltipVisibilityItem(_shipTTX:gfx, _avatarEntity:gfx, _isRealParams:bool, _userPrefsNum:gfx=null)
	(scope
		#fix for skill---------------------
		(var avatarComponent:gfx = "_avatarEntity ? _avatarEntity.avatar : null")
		(var selfPlayer:gfx = "$datahub.getSingleEntity(CC.playerAvatar)")

		#shipId -> ownShip (ship in port) -> crewId (crew on board) -> crewSkill (check crew has skill)
		(var isSelf:bool = "selfPlayer ? selfPlayer.avatar.id == avatarComponent.id : false")
		(var shipId:number = "avatarComponent ? avatarComponent.ship.ref.ship.id : null" (event "avatarComponent.evShipRefChanged"))
		(var shipType:str = "avatarComponent ? avatarComponent.shipType : null" (event "avatarComponent.evShipTypeChanged"))
		(var ownShipEntity:gfx = "$datahub.getPrimaryEntity(CC.ownShip, shipId)")

		(var skillId:number = "shipType in TP_CONCEALMENT_SKILL_ID ? TP_CONCEALMENT_SKILL_ID[shipType] : null")
		(var skillEntity:gfx = "$datahub.getPrimaryCompositeEntity(CC.skill, skillId, shipType, TP_CONCEALMENT_CREW_ID)")
		
		(var crewId:number = "ownShipEntity ? ownShipEntity.ownShip.crewId : null" (event "ownShipEntity.ownShip.evCrewChanged"))
		(var crewSkillEntity:gfx = "$datahub.getPrimaryCompositeEntity(CC.crewSkill, crewId, skillEntity.id)")
		#(crewId, skill) -> rutrns crewSkill if the crew is onboard and has skill

		(var isCorrectionNeeded:bool = "!(crewSkillEntity || isSelf || _isRealParams)")

		(var modifiers:dict = "skillEntity ? skillEntity.attributes.modifiers : null")
		(var visibilityModifier:number = "isCorrectionNeeded && modifiers ? (1 + modifiers.visibilityDistCoeff * 0.01) : 1.0") #value is negative and %
		#---------------------

		(var visibilityTTX:gfx = "_shipTTX.visibility")
		(var visibilityByShip:number = "visibilityTTX ? visibilityTTX.visibilityByShip.normal.value : null") #CAPTAIN SKILL FIX
		(var visibilityByPlane:number = "visibilityTTX ? visibilityTTX.visibilityByPlane.normal.value : null") #CAPTAIN SKILL FIX
		(var visibilityByShipSmoke:number = "visibilityTTX ? visibilityTTX.visibilityByShip.smoke.value : null")

		#fix------------------
		(var modifiedVisibilityByShip:number = "visibilityByShip * visibilityModifier") #CAPTAIN SKILL FIX
		(var modifiedVisibilityByPlane:number = "visibilityByPlane * visibilityModifier") #CAPTAIN SKILL FIX
		#---------------------
	)

	(class $TP_FullWidth)

	(block
		(class $TP_FullWidth)
		(class $TP_TooltipSectionMargin)
		(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_VISIBILITY_DIST_BY_SHIP'" _value="modifiedVisibilityByShip" _unit="'km'" _userPrefsNum="_userPrefsNum")
		(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_VISIBILITY_DIST_BY_GK_IN_SMOKE_BATTLE'" _value="visibilityByShipSmoke" _unit="'km'" _userPrefsNum="_userPrefsNum")
		(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_VISIBILITY_DIST_BY_PLANE'" _value="modifiedVisibilityByPlane" _unit="'km'" _userPrefsNum="_userPrefsNum")
	)
)

(def element TP_TooltipConsumableItem(_shipBattleInfo:gfx, _userPrefsNum:gfx=null)
	(scope
		(var mainConsumables:array = "_shipBattleInfo.mainConsumables")
		(var altConsumables:array = "_shipBattleInfo.altConsumables")
	)
	(style
		(width = 100%)
	)
	(element ShipInfoConsumables
		_title = "altConsumables.length > 0 ? 'IDS_SHIP_INFO_MAIN_CONSUMABLES_OPTIONAL' : 'IDS_SHIP_INFO_MAIN_CONSUMABLES'"
		_items = "mainConsumables"
		_extraItems = "altConsumables"
		_iconSize = "45"
		_isSimple = true
		(bind visible "mainConsumables.length != 0 || altConsumables.length != 0")
	)
)

(def element TP_TooltipShipConfigTitleItem (_title:str, _indent:number="TP_TOOLTIP_INDENTS.HEADER", _userPrefsNum:gfx=null)
	(scope
		(var className:str = "_indent == TP_TOOLTIP_INDENTS.HEADER ? '$TextDefaultBold17NM' : '$TextDefaultBoldNM'")
	)

	(bind visible "_title")

	(style
		(width = 100%)
		(marginBottom = 5px)
		(bind paddingLeft "_indent")
	)

	(tf
		(bind class "className")
		(bind text "_title")
		(style
			(width = 100%)
		)
	)
)

(def element TP_TooltipShipConfigTextItem (_title:str, _value:number, _unit:str=null, _roundDigit:number="1", _indent:number="TP_TOOLTIP_INDENTS.TEXT", _userPrefsNum:gfx=null)
	(scope
		(var isValueVisible:bool = "_value")
	)

	(bind visible "isValueVisible")

	(style
		(width = 100%)
		(flow = "Flow.HORIZONTAL")
		(marginBottom = 3px)
		(align = "middle")
	)

	(hblock
		(style
			(align = "middle")
			(width = 90%)
			(bind paddingLeft "_indent")
		)
		(tf
			(class $TextDefaultNM)
			(text = '•')
			(style
				(marginRight = 5px)
			)
		)
		(tf
			(class $TextDefaultNM)
			(bind text "tr(_title) + ':'")
			(style
				(width = "100%")
				(leading = -5)
			)
		)
	)
	(hblock
		(style
			(width = 10%)
		)
		(tf
			(class $TextDefaultNM)
			(bind text "formatFloatingPoint(_value, _roundDigit)")
		)
		(tf
			(bind visible "_unit")
			(class $TextDefaultNM)
			(bind text "_unit")
			(alpha = "TC")
			(style
				(marginLeft = "XS")
			)
		)
	)
)

(def element TP_TooltipShipConfigClassIconsItem (_title:str, _canHitClasses:array, _indent:number="TP_TOOLTIP_INDENTS.TEXT", _userPrefsNum:gfx=null)
	(scope
		(var isVisible:bool = "_canHitClasses && _canHitClasses.length > 0")
	)

	(style
		(width = 100%)
		(flow = "Flow.HORIZONTAL")
		(marginBottom = 3px)
		(align = "middle")
	)

	(hblock
		(style
			(align = "middle")
			(width = 90%)
			(bind paddingLeft "_indent")
		)
		(tf
			(class $TextDefaultNM)
			(text = '•')
			(style
				(marginRight = 5px)
			)
		)
		(tf
			(class $TextDefaultNM)
			(bind text "tr(_title) + ':'")
			(style
				(width = "100%")
				(leading = -5)
			)
		)
	)
	(hblock
		(style
			(width = 35%)
			(align = "middle|right")
			(marginLeft = -50%)
		)
		(controller $Repeat renderer='TP_ClassIconItem'
			(bind enabled "isVisible")
			(bind count "_canHitClasses.length")
			(args _className="_canHitClasses[$index]")
		)
	)
)

(def element TP_ClassIconItem (_className:str) layout=true
	(style
		(width = 27px) (height = 0) (marginTop = -25px)
		(bind backgroundImage "'url:../service_kit/ship_classes/icon_default_' + toLower(_className) + '.png'")
	)
)

#--------------------------------------------------------------------------------
# Macros
#--------------------------------------------------------------------------------

(def macro TP_GET_DISPLAY_MODE (_varName:expression, _prefValue:expression)
	(var name="_varName" type=bool value="_prefValue == TP_DISPLAY_MODES.ADAPTIVE ? altVision : _prefValue")
)

(def macro TP_GET_ISAFK (_entity:expression)
	# Returns isAFK:bool
	#
	# Entity
	(macro IS_SPECTATOR_MODE)
	(macro TP_GET_MARKER_DATA _entity="_entity")
	(var isBot:bool = "avatarComponent ? avatarComponent.isBot : true")
	(var isLoadedInBattle:bool = "avatarComponent ? avatarComponent.isLoadedInBattle : true" (event "avatarComponent.evIsLoadedInBattleChanged"))
	(var isAFK:bool = "isAlive && !isSpectatorTrainingMode && !isSelf && !isBot && !isLoadedInBattle")
)

(def macro TP_TOOLTIP_BEHAVIOUR (_isAlly:expression = false)

	(bindcall show animation =	{	duration:	"0.3",
									delay:		"0.15",
									easing:		"Easing.cubic_out",
									from:		{ alpha: 0, top: 5 },
									to:			{ alpha: 1, top: 0 }
								}
								on = 'rollOver'
	)

	(bindcall hide animation = {	duration:	"0.05",
									delay:		"0",
									easing:		"Easing.cubic_out",
									from:		{ alpha: 1, top: 0 },
									to:			{ alpha: 0, top: -5}
								}
								on = 'rollOut'
	)

	(offset = {	x: 35, y: 15})

	(bind screenBoundsOffset "{	left:	_isAlly ? elemWidth : 10,
								top:	10,
								right:	_isAlly ? 10 : elemWidth,
								bottom:	10 }")
	
	(priority = "0")

	(bind align "_isAlly ? right|middle : left|middle")
	(position="absolute")
)

(def macro TP_BIND_BLURINTENSITY(_blurIntensity:expression="0.3")
	(controller $Animation
		(bindcall play  duration="0.0001"
						to	 = "{ blurIntensity: _blurIntensity }"
						watch=false
						init=true
						(bind trigger "_blurIntensity")
		)
	)
)

(def macro TP_GET_MARKER_DATA (_entity:expression)
	(var avatarComponent:gfx = "_entity ? _entity.avatar : null")
	(var divisionMemberComponent:gfx = "_entity ? _entity.divisionMember : null")
	(var subType:str = "avatarComponent ? avatarComponent.shipType : ''" (event "avatarComponent.evShipTypeChanged"))
	(var shipType:str = "toLower(subType)")
	(var relationComponent:gfx = "_entity ? _entity.relation : null")
	(var isSelf:bool = "relationComponent && relationComponent.value == SC.Battle.PLAYER_RELATION.SELF" (event "relationComponent.evChanged"))
	(var isAlly:bool = "relationComponent && relationComponent.value == SC.Battle.PLAYER_RELATION.ALLY" (event "relationComponent.evChanged"))
	(var isEnemy:bool = "relationComponent && relationComponent.value == SC.Battle.PLAYER_RELATION.ENEMY" (event "relationComponent.evChanged"))
	(var isAlive:bool = "_entity && _entity.hasComponent(CC.health) && _entity.health.isAlive" (event "_entity.health.evIsAliveChanged") (event "_entity.evAdded") (event "_entity.evRemoved"))
	(var tkStatus:bool = "avatarComponent && avatarComponent.tkStatus" (event "avatarComponent.evTeamkillStatusChanged"))
	(var isInSameDivision:bool = "divisionMemberComponent && divisionMemberComponent.isInSameDivision" (event "divisionMemberComponent.evDivisionChanged"))
	(var isGolden:bool = "isInSameDivision || isSelf")
)